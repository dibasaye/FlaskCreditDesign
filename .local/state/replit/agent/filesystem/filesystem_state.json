{"file_contents":{"forms.py":{"content":"from flask_wtf import FlaskForm\nfrom wtforms import StringField, PasswordField, EmailField, SelectField, FloatField, IntegerField, TextAreaField, DateField, BooleanField\nfrom wtforms.validators import DataRequired, Email, Length, Optional, NumberRange\n\nclass LoginForm(FlaskForm):\n    username = StringField('Nom d\\'utilisateur', validators=[DataRequired(), Length(min=3, max=80)])\n    password = PasswordField('Mot de passe', validators=[DataRequired()])\n\nclass ClientForm(FlaskForm):\n    first_name = StringField('Prénom', validators=[DataRequired(), Length(max=100)])\n    last_name = StringField('Nom', validators=[DataRequired(), Length(max=100)])\n    email = EmailField('Email', validators=[Optional(), Email()])\n    phone = StringField('Téléphone', validators=[Optional(), Length(max=20)])\n    address = TextAreaField('Adresse', validators=[Optional()])\n    date_of_birth = DateField('Date de naissance', validators=[Optional()], format='%Y-%m-%d')\n    id_number = StringField('Numéro d\\'identité', validators=[Optional(), Length(max=50)])\n\nclass ProductForm(FlaskForm):\n    name = StringField('Nom du produit', validators=[DataRequired(), Length(max=100)])\n    product_type = SelectField('Type de produit', choices=[('credit', 'Crédit'), ('savings', 'Épargne')], validators=[DataRequired()])\n    interest_rate = FloatField('Taux d\\'intérêt (%)', validators=[DataRequired(), NumberRange(min=0, max=100)])\n    min_amount = FloatField('Montant minimum', validators=[Optional(), NumberRange(min=0)])\n    max_amount = FloatField('Montant maximum', validators=[Optional(), NumberRange(min=0)])\n    min_duration = IntegerField('Durée minimum (mois)', validators=[Optional(), NumberRange(min=1)])\n    max_duration = IntegerField('Durée maximum (mois)', validators=[Optional(), NumberRange(min=1)])\n    description = TextAreaField('Description', validators=[Optional()])\n    active = BooleanField('Actif')\n\nclass CreditForm(FlaskForm):\n    client_id = SelectField('Client', coerce=int, validators=[DataRequired()])\n    product_id = SelectField('Produit de crédit', coerce=int, validators=[DataRequired()])\n    amount = FloatField('Montant demandé', validators=[DataRequired(), NumberRange(min=1)])\n    duration_months = IntegerField('Durée (mois)', validators=[DataRequired(), NumberRange(min=1)])\n    notes = TextAreaField('Notes', validators=[Optional()])\n\nclass CreditPaymentForm(FlaskForm):\n    amount = FloatField('Montant du paiement', validators=[DataRequired(), NumberRange(min=0.01)])\n    payment_method = StringField('Méthode de paiement', validators=[Optional(), Length(max=50)])\n    reference = StringField('Référence', validators=[Optional(), Length(max=100)])\n    notes = TextAreaField('Notes', validators=[Optional()])\n\nclass SavingsAccountForm(FlaskForm):\n    client_id = SelectField('Client', coerce=int, validators=[DataRequired()])\n    product_id = SelectField('Produit d\\'épargne', coerce=int, validators=[DataRequired()])\n    initial_deposit = FloatField('Dépôt initial', validators=[Optional(), NumberRange(min=0)])\n\nclass SavingsTransactionForm(FlaskForm):\n    transaction_type = SelectField('Type de transaction', choices=[('deposit', 'Dépôt'), ('withdrawal', 'Retrait')], validators=[DataRequired()])\n    amount = FloatField('Montant', validators=[DataRequired(), NumberRange(min=0.01)])\n    reference = StringField('Référence', validators=[Optional(), Length(max=100)])\n    notes = TextAreaField('Notes', validators=[Optional()])\n\nclass ProfileForm(FlaskForm):\n    username = StringField('Nom d\\'utilisateur', validators=[DataRequired(), Length(min=3, max=80)])\n    email = EmailField('Email', validators=[DataRequired(), Email()])\n\nclass ChangePasswordForm(FlaskForm):\n    current_password = PasswordField('Mot de passe actuel', validators=[DataRequired()])\n    new_password = PasswordField('Nouveau mot de passe', validators=[DataRequired(), Length(min=6)])\n    confirm_password = PasswordField('Confirmer le mot de passe', validators=[DataRequired()])\n","size_bytes":4003},"main.py":{"content":"import os\nfrom datetime import datetime\nfrom flask import Flask, render_template, redirect, url_for, flash, request\nfrom flask_login import LoginManager, login_user, logout_user, login_required, current_user\nfrom models import db, User, Client, Product, Credit, CreditPayment, SavingsAccount, SavingsTransaction\nfrom forms import LoginForm, ClientForm, ProductForm, CreditForm, CreditPaymentForm, SavingsAccountForm, SavingsTransactionForm, ProfileForm, ChangePasswordForm\nfrom sqlalchemy import func\nimport random\nimport string\n\napp = Flask(__name__)\napp.secret_key = os.environ.get(\"SESSION_SECRET\") or \"dev-secret-key-change-in-production\"\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = os.environ.get(\"DATABASE_URL\")\napp.config[\"SQLALCHEMY_ENGINE_OPTIONS\"] = {\n    \"pool_recycle\": 300,\n    \"pool_pre_ping\": True,\n}\n\ndb.init_app(app)\n\nlogin_manager = LoginManager()\nlogin_manager.init_app(app)\nlogin_manager.login_view = 'login'\nlogin_manager.login_message = 'Veuillez vous connecter pour accéder à cette page.'\n\n@login_manager.user_loader\ndef load_user(user_id):\n    return User.query.get(int(user_id))\n\ndef generate_unique_id(prefix, model, field):\n    while True:\n        random_part = ''.join(random.choices(string.digits, k=8))\n        unique_id = f\"{prefix}{random_part}\"\n        if not model.query.filter(getattr(model, field) == unique_id).first():\n            return unique_id\n\nwith app.app_context():\n    db.create_all()\n    \n    admin_username = os.environ.get(\"ADMIN_USERNAME\")\n    admin_password = os.environ.get(\"ADMIN_PASSWORD\")\n    admin_email = os.environ.get(\"ADMIN_EMAIL\", \"admin@example.com\")\n    \n    if admin_username and admin_password and not User.query.filter_by(username=admin_username).first():\n        admin = User(username=admin_username, email=admin_email, role='administrateur')\n        admin.set_password(admin_password)\n        db.session.add(admin)\n        db.session.commit()\n        print(f\"Utilisateur administrateur '{admin_username}' créé avec succès\")\n\n@app.route('/')\ndef index():\n    if current_user.is_authenticated:\n        return redirect(url_for('dashboard'))\n    return redirect(url_for('login'))\n\n@app.route('/login', methods=['GET', 'POST'])\ndef login():\n    if current_user.is_authenticated:\n        return redirect(url_for('dashboard'))\n    \n    form = LoginForm()\n    if form.validate_on_submit():\n        user = User.query.filter_by(username=form.username.data).first()\n        if user and user.check_password(form.password.data):\n            login_user(user)\n            flash('Connexion réussie!', 'success')\n            next_page = request.args.get('next')\n            return redirect(next_page) if next_page else redirect(url_for('dashboard'))\n        else:\n            flash('Nom d\\'utilisateur ou mot de passe incorrect', 'danger')\n    return render_template('login.html', form=form)\n\n@app.route('/logout')\n@login_required\ndef logout():\n    logout_user()\n    flash('Déconnexion réussie', 'info')\n    return redirect(url_for('login'))\n\n@app.route('/dashboard')\n@login_required\ndef dashboard():\n    total_clients = Client.query.count()\n    total_credits = Credit.query.count()\n    active_credits = Credit.query.filter_by(status='active').count()\n    total_savings = SavingsAccount.query.count()\n    \n    total_credit_amount = db.session.query(func.sum(Credit.amount)).filter(Credit.status.in_(['active', 'approved', 'disbursed'])).scalar() or 0\n    total_credit_paid = db.session.query(func.sum(Credit.amount_paid)).filter(Credit.status.in_(['active', 'approved', 'disbursed'])).scalar() or 0\n    total_savings_balance = db.session.query(func.sum(SavingsAccount.balance)).filter_by(status='active').scalar() or 0\n    \n    recent_credits = Credit.query.order_by(Credit.application_date.desc()).limit(5).all()\n    recent_clients = Client.query.order_by(Client.created_at.desc()).limit(5).all()\n    \n    pending_credits = Credit.query.filter_by(status='pending').count()\n    \n    credit_products = Product.query.filter_by(product_type='credit', active=True).count()\n    savings_products = Product.query.filter_by(product_type='savings', active=True).count()\n    \n    return render_template('dashboard.html',\n                         total_clients=total_clients,\n                         total_credits=total_credits,\n                         active_credits=active_credits,\n                         total_savings=total_savings,\n                         total_credit_amount=total_credit_amount,\n                         total_credit_paid=total_credit_paid,\n                         total_savings_balance=total_savings_balance,\n                         recent_credits=recent_credits,\n                         recent_clients=recent_clients,\n                         pending_credits=pending_credits,\n                         credit_products=credit_products,\n                         savings_products=savings_products)\n\n@app.route('/clients')\n@login_required\ndef clients():\n    clients_list = Client.query.order_by(Client.created_at.desc()).all()\n    return render_template('clients.html', clients=clients_list)\n\n@app.route('/clients/new', methods=['GET', 'POST'])\n@login_required\ndef new_client():\n    form = ClientForm()\n    if form.validate_on_submit():\n        client = Client(\n            client_id=generate_unique_id('CLT', Client, 'client_id'),\n            first_name=form.first_name.data,\n            last_name=form.last_name.data,\n            email=form.email.data,\n            phone=form.phone.data,\n            address=form.address.data,\n            date_of_birth=form.date_of_birth.data,\n            id_number=form.id_number.data\n        )\n        db.session.add(client)\n        db.session.commit()\n        flash(f'Client {client.full_name} créé avec succès!', 'success')\n        return redirect(url_for('clients'))\n    return render_template('client_form.html', form=form, title='Nouveau Client')\n\n@app.route('/clients/<int:id>/edit', methods=['GET', 'POST'])\n@login_required\ndef edit_client(id):\n    client = Client.query.get_or_404(id)\n    form = ClientForm(obj=client)\n    if form.validate_on_submit():\n        form.populate_obj(client)\n        client.updated_at = datetime.utcnow()\n        db.session.commit()\n        flash(f'Client {client.full_name} mis à jour avec succès!', 'success')\n        return redirect(url_for('client_detail', id=id))\n    return render_template('client_form.html', form=form, title='Modifier Client', client=client)\n\n@app.route('/clients/<int:id>')\n@login_required\ndef client_detail(id):\n    client = Client.query.get_or_404(id)\n    return render_template('client_detail.html', client=client)\n\n@app.route('/clients/<int:id>/delete', methods=['POST'])\n@login_required\ndef delete_client(id):\n    if current_user.role != 'administrateur':\n        flash('Accès non autorisé', 'danger')\n        return redirect(url_for('clients'))\n    \n    client = Client.query.get_or_404(id)\n    db.session.delete(client)\n    db.session.commit()\n    flash(f'Client {client.full_name} supprimé avec succès!', 'success')\n    return redirect(url_for('clients'))\n\n@app.route('/products')\n@login_required\ndef products():\n    products_list = Product.query.order_by(Product.created_at.desc()).all()\n    return render_template('products.html', products=products_list)\n\n@app.route('/products/new', methods=['GET', 'POST'])\n@login_required\ndef new_product():\n    form = ProductForm()\n    if form.validate_on_submit():\n        product = Product(\n            name=form.name.data,\n            product_type=form.product_type.data,\n            interest_rate=form.interest_rate.data,\n            min_amount=form.min_amount.data,\n            max_amount=form.max_amount.data,\n            min_duration=form.min_duration.data,\n            max_duration=form.max_duration.data,\n            description=form.description.data,\n            active=form.active.data\n        )\n        db.session.add(product)\n        db.session.commit()\n        flash(f'Produit {product.name} créé avec succès!', 'success')\n        return redirect(url_for('products'))\n    return render_template('product_form.html', form=form, title='Nouveau Produit')\n\n@app.route('/products/<int:id>/edit', methods=['GET', 'POST'])\n@login_required\ndef edit_product(id):\n    product = Product.query.get_or_404(id)\n    form = ProductForm(obj=product)\n    if form.validate_on_submit():\n        form.populate_obj(product)\n        db.session.commit()\n        flash(f'Produit {product.name} mis à jour avec succès!', 'success')\n        return redirect(url_for('products'))\n    return render_template('product_form.html', form=form, title='Modifier Produit', product=product)\n\n@app.route('/credits')\n@login_required\ndef credits():\n    credits_list = Credit.query.order_by(Credit.application_date.desc()).all()\n    return render_template('credits.html', credits=credits_list)\n\n@app.route('/credits/new', methods=['GET', 'POST'])\n@login_required\ndef new_credit():\n    form = CreditForm()\n    form.client_id.choices = [(c.id, c.full_name) for c in Client.query.order_by(Client.last_name).all()]\n    form.product_id.choices = [(p.id, p.name) for p in Product.query.filter_by(product_type='credit', active=True).all()]\n    \n    if form.validate_on_submit():\n        product = Product.query.get(form.product_id.data)\n        amount = form.amount.data\n        duration = form.duration_months.data\n        rate = product.interest_rate / 100 / 12\n        \n        if rate > 0:\n            monthly_payment = (amount * rate * (1 + rate)**duration) / ((1 + rate)**duration - 1)\n        else:\n            monthly_payment = amount / duration\n        \n        total_amount = monthly_payment * duration\n        \n        credit = Credit(\n            credit_number=generate_unique_id('CRD', Credit, 'credit_number'),\n            client_id=form.client_id.data,\n            product_id=form.product_id.data,\n            amount=amount,\n            interest_rate=product.interest_rate,\n            duration_months=duration,\n            monthly_payment=round(monthly_payment, 2),\n            total_amount=round(total_amount, 2),\n            notes=form.notes.data,\n            status='pending'\n        )\n        db.session.add(credit)\n        db.session.commit()\n        flash(f'Demande de crédit {credit.credit_number} créée avec succès!', 'success')\n        return redirect(url_for('credits'))\n    \n    return render_template('credit_form.html', form=form, title='Nouvelle Demande de Crédit')\n\n@app.route('/credits/<int:id>')\n@login_required\ndef credit_detail(id):\n    credit = Credit.query.get_or_404(id)\n    payment_form = CreditPaymentForm()\n    return render_template('credit_detail.html', credit=credit, payment_form=payment_form)\n\n@app.route('/credits/<int:id>/approve', methods=['POST'])\n@login_required\ndef approve_credit(id):\n    if current_user.role not in ['administrateur', 'gestionnaire']:\n        flash('Accès non autorisé', 'danger')\n        return redirect(url_for('credits'))\n    \n    credit = Credit.query.get_or_404(id)\n    credit.status = 'approved'\n    credit.approval_date = datetime.utcnow()\n    db.session.commit()\n    flash(f'Crédit {credit.credit_number} approuvé avec succès!', 'success')\n    return redirect(url_for('credit_detail', id=id))\n\n@app.route('/credits/<int:id>/disburse', methods=['POST'])\n@login_required\ndef disburse_credit(id):\n    if current_user.role not in ['administrateur', 'gestionnaire']:\n        flash('Accès non autorisé', 'danger')\n        return redirect(url_for('credits'))\n    \n    credit = Credit.query.get_or_404(id)\n    if credit.status == 'approved':\n        credit.status = 'active'\n        credit.disbursement_date = datetime.utcnow()\n        db.session.commit()\n        flash(f'Crédit {credit.credit_number} décaissé avec succès!', 'success')\n    return redirect(url_for('credit_detail', id=id))\n\n@app.route('/credits/<int:id>/payment', methods=['POST'])\n@login_required\ndef add_credit_payment(id):\n    credit = Credit.query.get_or_404(id)\n    form = CreditPaymentForm()\n    \n    if form.validate_on_submit():\n        payment = CreditPayment(\n            credit_id=id,\n            amount=form.amount.data,\n            payment_method=form.payment_method.data,\n            reference=form.reference.data,\n            notes=form.notes.data\n        )\n        credit.amount_paid += form.amount.data\n        \n        if credit.amount_paid >= credit.total_amount:\n            credit.status = 'completed'\n        \n        db.session.add(payment)\n        db.session.commit()\n        flash(f'Paiement de {form.amount.data} enregistré avec succès!', 'success')\n    \n    return redirect(url_for('credit_detail', id=id))\n\n@app.route('/savings')\n@login_required\ndef savings():\n    savings_list = SavingsAccount.query.order_by(SavingsAccount.opening_date.desc()).all()\n    return render_template('savings.html', savings=savings_list)\n\n@app.route('/savings/new', methods=['GET', 'POST'])\n@login_required\ndef new_savings():\n    form = SavingsAccountForm()\n    form.client_id.choices = [(c.id, c.full_name) for c in Client.query.order_by(Client.last_name).all()]\n    form.product_id.choices = [(p.id, p.name) for p in Product.query.filter_by(product_type='savings', active=True).all()]\n    \n    if form.validate_on_submit():\n        product = Product.query.get(form.product_id.data)\n        account = SavingsAccount(\n            account_number=generate_unique_id('SAV', SavingsAccount, 'account_number'),\n            client_id=form.client_id.data,\n            product_id=form.product_id.data,\n            interest_rate=product.interest_rate,\n            balance=form.initial_deposit.data or 0\n        )\n        db.session.add(account)\n        \n        if form.initial_deposit.data and form.initial_deposit.data > 0:\n            transaction = SavingsTransaction(\n                account_id=account.id,\n                transaction_type='deposit',\n                amount=form.initial_deposit.data,\n                balance_after=form.initial_deposit.data,\n                notes='Dépôt initial'\n            )\n            db.session.add(transaction)\n        \n        db.session.commit()\n        flash(f'Compte d\\'épargne {account.account_number} créé avec succès!', 'success')\n        return redirect(url_for('savings'))\n    \n    return render_template('savings_form.html', form=form, title='Nouveau Compte d\\'Épargne')\n\n@app.route('/savings/<int:id>')\n@login_required\ndef savings_detail(id):\n    account = SavingsAccount.query.get_or_404(id)\n    transaction_form = SavingsTransactionForm()\n    return render_template('savings_detail.html', account=account, transaction_form=transaction_form)\n\n@app.route('/savings/<int:id>/transaction', methods=['POST'])\n@login_required\ndef add_savings_transaction(id):\n    account = SavingsAccount.query.get_or_404(id)\n    form = SavingsTransactionForm()\n    \n    if form.validate_on_submit():\n        amount = form.amount.data\n        transaction_type = form.transaction_type.data\n        \n        if transaction_type == 'withdrawal' and amount > account.balance:\n            flash('Solde insuffisant pour ce retrait', 'danger')\n            return redirect(url_for('savings_detail', id=id))\n        \n        if transaction_type == 'deposit':\n            account.balance += amount\n        else:\n            account.balance -= amount\n        \n        transaction = SavingsTransaction(\n            account_id=id,\n            transaction_type=transaction_type,\n            amount=amount,\n            balance_after=account.balance,\n            reference=form.reference.data,\n            notes=form.notes.data\n        )\n        db.session.add(transaction)\n        db.session.commit()\n        flash(f'Transaction de {amount} enregistrée avec succès!', 'success')\n    \n    return redirect(url_for('savings_detail', id=id))\n\n@app.route('/settings', methods=['GET', 'POST'])\n@login_required\ndef settings():\n    profile_form = ProfileForm(obj=current_user)\n    password_form = ChangePasswordForm()\n    \n    if profile_form.validate_on_submit() and 'profile_submit' in request.form:\n        existing_user = User.query.filter(User.username == profile_form.username.data, User.id != current_user.id).first()\n        if existing_user:\n            flash('Ce nom d\\'utilisateur est déjà utilisé', 'danger')\n        else:\n            current_user.username = profile_form.username.data\n            current_user.email = profile_form.email.data\n            db.session.commit()\n            flash('Profil mis à jour avec succès!', 'success')\n            return redirect(url_for('settings'))\n    \n    if password_form.validate_on_submit() and 'password_submit' in request.form:\n        if not current_user.check_password(password_form.current_password.data):\n            flash('Mot de passe actuel incorrect', 'danger')\n        elif password_form.new_password.data != password_form.confirm_password.data:\n            flash('Les nouveaux mots de passe ne correspondent pas', 'danger')\n        else:\n            current_user.set_password(password_form.new_password.data)\n            db.session.commit()\n            flash('Mot de passe changé avec succès!', 'success')\n            return redirect(url_for('settings'))\n    \n    return render_template('settings.html', profile_form=profile_form, password_form=password_form)\n\n@app.template_filter('currency')\ndef currency_filter(value):\n    if value is None:\n        value = 0\n    return f\"{value:,.2f} FCFA\"\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000, debug=True)\n","size_bytes":17417},"static/css/style.css":{"content":":root {\n    --primary-color: #2563eb;\n    --secondary-color: #059669;\n    --accent-color: #8b5cf6;\n    --warning-color: #f59e0b;\n    --danger-color: #ef4444;\n    --dark-color: #1e293b;\n    --light-bg: #f8fafc;\n    --card-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);\n    --card-shadow-hover: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);\n}\n\nbody {\n    font-family: 'Inter', 'Segoe UI', -apple-system, BlinkMacSystemFont, sans-serif;\n    background-color: var(--light-bg);\n    color: var(--dark-color);\n}\n\n.navbar {\n    background: linear-gradient(135deg, #2563eb 0%, #1d4ed8 100%) !important;\n    box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n}\n\n.brand-text {\n    font-weight: 700;\n    font-size: 1.3rem;\n    letter-spacing: -0.5px;\n}\n\n.page-title {\n    font-weight: 700;\n    color: var(--dark-color);\n    margin-bottom: 0.5rem;\n}\n\n.stats-card {\n    background: white;\n    border-radius: 12px;\n    padding: 1.5rem;\n    box-shadow: var(--card-shadow);\n    transition: all 0.3s ease;\n    border: none;\n    overflow: hidden;\n    position: relative;\n}\n\n.stats-card:hover {\n    transform: translateY(-5px);\n    box-shadow: var(--card-shadow-hover);\n}\n\n.stats-card::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    height: 4px;\n}\n\n.stats-card-blue::before {\n    background: linear-gradient(90deg, #2563eb, #3b82f6);\n}\n\n.stats-card-green::before {\n    background: linear-gradient(90deg, #059669, #10b981);\n}\n\n.stats-card-purple::before {\n    background: linear-gradient(90deg, #8b5cf6, #a78bfa);\n}\n\n.stats-card-orange::before {\n    background: linear-gradient(90deg, #f59e0b, #fbbf24);\n}\n\n.stats-icon {\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    width: 60px;\n    height: 60px;\n    border-radius: 12px;\n    font-size: 1.8rem;\n    float: left;\n    margin-right: 1rem;\n}\n\n.stats-card-blue .stats-icon {\n    background: linear-gradient(135deg, #dbeafe, #bfdbfe);\n    color: #2563eb;\n}\n\n.stats-card-green .stats-icon {\n    background: linear-gradient(135deg, #d1fae5, #a7f3d0);\n    color: #059669;\n}\n\n.stats-card-purple .stats-icon {\n    background: linear-gradient(135deg, #ede9fe, #ddd6fe);\n    color: #8b5cf6;\n}\n\n.stats-card-orange .stats-icon {\n    background: linear-gradient(135deg, #fef3c7, #fde68a);\n    color: #f59e0b;\n}\n\n.stats-content h3 {\n    font-size: 2rem;\n    font-weight: 700;\n    margin: 0;\n    color: var(--dark-color);\n}\n\n.stats-content p {\n    margin: 0;\n    color: #64748b;\n    font-size: 0.95rem;\n}\n\n.card {\n    border-radius: 12px;\n    border: none;\n    box-shadow: var(--card-shadow);\n    transition: all 0.3s ease;\n}\n\n.card:hover {\n    box-shadow: var(--card-shadow-hover);\n}\n\n.card-header {\n    border-radius: 12px 12px 0 0 !important;\n    border-bottom: none;\n    padding: 1rem 1.5rem;\n    font-weight: 600;\n}\n\n.btn {\n    border-radius: 8px;\n    padding: 0.6rem 1.2rem;\n    font-weight: 500;\n    transition: all 0.2s ease;\n    border: none;\n}\n\n.btn:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n}\n\n.btn-primary {\n    background: linear-gradient(135deg, #2563eb, #1d4ed8);\n}\n\n.btn-success {\n    background: linear-gradient(135deg, #059669, #047857);\n}\n\n.btn-warning {\n    background: linear-gradient(135deg, #f59e0b, #d97706);\n}\n\n.btn-danger {\n    background: linear-gradient(135deg, #ef4444, #dc2626);\n}\n\n.btn-info {\n    background: linear-gradient(135deg, #06b6d4, #0891b2);\n}\n\n.table {\n    border-radius: 8px;\n    overflow: hidden;\n}\n\n.table thead {\n    background: linear-gradient(135deg, #f1f5f9, #e2e8f0);\n}\n\n.table-hover tbody tr:hover {\n    background-color: #f8fafc;\n    cursor: pointer;\n}\n\n.badge {\n    padding: 0.4rem 0.8rem;\n    font-weight: 500;\n    border-radius: 6px;\n}\n\n.login-container {\n    min-height: 100vh;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n    padding: 2rem;\n}\n\n.login-card {\n    background: white;\n    padding: 3rem;\n    border-radius: 20px;\n    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);\n    width: 100%;\n    max-width: 450px;\n    animation: slideUp 0.5s ease;\n}\n\n@keyframes slideUp {\n    from {\n        opacity: 0;\n        transform: translateY(30px);\n    }\n    to {\n        opacity: 1;\n        transform: translateY(0);\n    }\n}\n\n.login-icon {\n    width: 80px;\n    height: 80px;\n    background: linear-gradient(135deg, #2563eb, #1d4ed8);\n    border-radius: 50%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    margin: 0 auto 1rem;\n    color: white;\n    font-size: 2.5rem;\n    box-shadow: 0 10px 30px rgba(37, 99, 235, 0.3);\n}\n\n.login-title {\n    color: var(--dark-color);\n    font-weight: 700;\n    margin-bottom: 0.5rem;\n}\n\n.form-control {\n    border-radius: 8px;\n    border: 2px solid #e2e8f0;\n    padding: 0.75rem 1rem;\n    transition: all 0.3s ease;\n}\n\n.form-control:focus {\n    border-color: #2563eb;\n    box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);\n}\n\n.alert {\n    border-radius: 10px;\n    border: none;\n    padding: 1rem 1.5rem;\n}\n\n.animated {\n    animation-duration: 0.5s;\n}\n\n.fadeInDown {\n    animation-name: fadeInDown;\n}\n\n@keyframes fadeInDown {\n    from {\n        opacity: 0;\n        transform: translateY(-20px);\n    }\n    to {\n        opacity: 1;\n        transform: translateY(0);\n    }\n}\n\n.progress {\n    border-radius: 10px;\n    overflow: hidden;\n    background-color: #e2e8f0;\n}\n\n.progress-bar {\n    background: linear-gradient(90deg, #059669, #10b981);\n    transition: width 0.6s ease;\n}\n\n.list-group-item {\n    border-radius: 8px !important;\n    margin-bottom: 0.5rem;\n    border: 1px solid #e2e8f0;\n    transition: all 0.2s ease;\n}\n\n.list-group-item:hover {\n    background-color: #f8fafc;\n    transform: translateX(5px);\n}\n\n.product-stat {\n    padding: 1rem;\n    border-radius: 8px;\n    background: #f8fafc;\n}\n\n.nav-link {\n    transition: all 0.3s ease;\n    border-radius: 6px;\n    margin: 0 0.2rem;\n}\n\n.nav-link:hover {\n    background-color: rgba(255, 255, 255, 0.1);\n}\n\n.nav-link.active {\n    background-color: rgba(255, 255, 255, 0.2);\n    font-weight: 600;\n}\n\n@media (max-width: 768px) {\n    .stats-card {\n        margin-bottom: 1rem;\n    }\n    \n    .login-card {\n        padding: 2rem;\n    }\n    \n    .stats-content h3 {\n        font-size: 1.5rem;\n    }\n}\n","size_bytes":6338},"replit.md":{"content":"# FinanceManager - Système de Gestion de Crédit & Épargne\n\n## Vue d'ensemble\nApplication web Flask complète pour la gestion des produits de crédit et d'épargne destinée aux institutions financières (banques, coopératives, microfinance).\n\n## Fonctionnalités principales\n\n### Gestion des Clients\n- Création et modification des profils clients avec identifiants uniques\n- Informations complètes (nom, email, téléphone, adresse, date de naissance, numéro d'identité)\n- Historique complet des crédits et comptes d'épargne\n- Vue détaillée de chaque client\n\n### Gestion des Produits\n- Création de produits de crédit et d'épargne\n- Paramétrage des taux d'intérêt, montants min/max, durées\n- Activation/désactivation des produits\n- Description et conditions personnalisables\n\n### Gestion des Crédits\n- Soumission de demandes de crédit\n- Workflow d'approbation (Pending → Approved → Active → Completed)\n- Calcul automatique des intérêts et échéances mensuelles\n- Suivi des remboursements avec barre de progression\n- Historique complet des paiements\n- Contrôle d'accès par rôle pour approbation/décaissement\n\n### Gestion de l'Épargne\n- Ouverture de comptes d'épargne\n- Dépôts et retraits avec validation de solde\n- Calcul automatique et affichage du solde après transaction\n- Historique détaillé des transactions\n- Paramétrage des taux d'intérêt par produit\n\n### Tableau de Bord\n- Statistiques en temps réel (clients, crédits actifs, épargne totale, demandes en attente)\n- Graphiques interactifs (Chart.js) pour visualisation des données\n- Montants totaux décaissés, remboursés et restants\n- Liste des crédits et clients récents\n\n### Authentification & Sécurité\n- Système de connexion sécurisé avec Flask-Login\n- Gestion des rôles (administrateur, gestionnaire, agent)\n- Mots de passe hashés avec Werkzeug\n- Compte administrateur configuré via variables d'environnement sécurisées\n- Protection des routes selon les rôles\n- Pas de mots de passe en dur dans le code\n\n## Architecture Technique\n\n### Backend\n- **Framework**: Flask 3.1.2\n- **ORM**: SQLAlchemy avec Flask-SQLAlchemy\n- **Base de données**: PostgreSQL (Neon)\n- **Authentification**: Flask-Login\n- **Formulaires**: Flask-WTF avec validation\n- **Sécurité**: Werkzeug pour hashage de mots de passe\n\n### Frontend\n- **Framework CSS**: Bootstrap 5.3.0\n- **Icônes**: Font Awesome 6.4.0\n- **Graphiques**: Chart.js 4.4.0\n- **Design**: CSS personnalisé avec palette de couleurs professionnelle\n- **Animations**: Transitions CSS fluides et modernes\n- **Responsive**: Interface adaptée mobile et desktop\n\n### Modèles de Données\n1. **User**: Utilisateurs avec rôles\n2. **Client**: Clients de l'institution\n3. **Product**: Produits de crédit et d'épargne\n4. **Credit**: Demandes et suivi de crédits\n5. **CreditPayment**: Paiements de remboursement\n6. **SavingsAccount**: Comptes d'épargne\n7. **SavingsTransaction**: Transactions d'épargne\n\n## Structure du Projet\n```\n.\n├── main.py                 # Application Flask principale\n├── models.py               # Modèles SQLAlchemy\n├── forms.py                # Formulaires WTForms\n├── templates/              # Templates Jinja2\n│   ├── base.html\n│   ├── login.html\n│   ├── dashboard.html\n│   ├── clients.html\n│   ├── client_form.html\n│   ├── client_detail.html\n│   ├── products.html\n│   ├── product_form.html\n│   ├── credits.html\n│   ├── credit_form.html\n│   ├── credit_detail.html\n│   ├── savings.html\n│   ├── savings_form.html\n│   └── savings_detail.html\n└── static/\n    └── css/\n        └── style.css       # Styles personnalisés\n```\n\n## Design & Interface\n- **Palette de couleurs**: Bleu professionnel (#2563eb), vert (#059669), violet (#8b5cf6)\n- **Style**: Moderne, épuré avec dégradés subtils\n- **Cartes**: Ombres douces, coins arrondis, animations au survol\n- **Navigation**: Barre de navigation fixe avec menu déroulant utilisateur\n- **Formulaires**: Champs bien espacés, validation visuelle\n- **Tableaux**: Hover effects, tri visuel\n\n## Configuration Requise\n\n### Variables d'Environnement\n- `DATABASE_URL`: URL de connexion PostgreSQL\n- `SESSION_SECRET`: Clé secrète pour les sessions Flask\n- `ADMIN_USERNAME`: Nom d'utilisateur administrateur initial\n- `ADMIN_PASSWORD`: Mot de passe administrateur initial\n- `ADMIN_EMAIL`: Email de l'administrateur\n\n### Dépendances Python\n- flask\n- flask-login\n- flask-wtf\n- flask-sqlalchemy\n- psycopg2-binary\n- python-dateutil\n- email-validator\n\n## Déploiement\nLe serveur démarre sur `0.0.0.0:5000` en mode debug pour le développement.\n\n## Améliorations Futures\n- Génération de rapports PDF\n- Simulation de prêts avec calculateur interactif\n- Système d'alertes et notifications\n- Audit trail complet\n- Export Excel/CSV\n- Système de sauvegarde automatique\n","size_bytes":4945},"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"email-validator>=2.3.0\",\n    \"flask>=3.1.2\",\n    \"flask-login>=0.6.3\",\n    \"flask-sqlalchemy>=3.1.1\",\n    \"flask-wtf>=1.2.2\",\n    \"psycopg2-binary>=2.9.11\",\n    \"python-dateutil>=2.9.0.post0\",\n]\n","size_bytes":342},"models.py":{"content":"import os\nfrom datetime import datetime\nfrom flask_sqlalchemy import SQLAlchemy\nfrom sqlalchemy.orm import DeclarativeBase\nfrom flask_login import UserMixin\nfrom werkzeug.security import generate_password_hash, check_password_hash\n\nclass Base(DeclarativeBase):\n    pass\n\ndb = SQLAlchemy(model_class=Base)\n\nclass User(UserMixin, db.Model):\n    __tablename__ = 'users'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(80), unique=True, nullable=False)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    password_hash = db.Column(db.String(255), nullable=False)\n    role = db.Column(db.String(20), nullable=False, default='agent')\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    def set_password(self, password):\n        self.password_hash = generate_password_hash(password)\n    \n    def check_password(self, password):\n        return check_password_hash(self.password_hash, password)\n\nclass Client(db.Model):\n    __tablename__ = 'clients'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    client_id = db.Column(db.String(20), unique=True, nullable=False)\n    first_name = db.Column(db.String(100), nullable=False)\n    last_name = db.Column(db.String(100), nullable=False)\n    email = db.Column(db.String(120))\n    phone = db.Column(db.String(20))\n    address = db.Column(db.Text)\n    date_of_birth = db.Column(db.Date)\n    id_number = db.Column(db.String(50))\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\n    \n    credits = db.relationship('Credit', backref='client', lazy=True, cascade='all, delete-orphan')\n    savings_accounts = db.relationship('SavingsAccount', backref='client', lazy=True, cascade='all, delete-orphan')\n    \n    @property\n    def full_name(self):\n        return f\"{self.first_name} {self.last_name}\"\n\nclass Product(db.Model):\n    __tablename__ = 'products'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(100), nullable=False)\n    product_type = db.Column(db.String(20), nullable=False)\n    interest_rate = db.Column(db.Float, nullable=False)\n    min_amount = db.Column(db.Float, default=0)\n    max_amount = db.Column(db.Float)\n    min_duration = db.Column(db.Integer)\n    max_duration = db.Column(db.Integer)\n    description = db.Column(db.Text)\n    active = db.Column(db.Boolean, default=True)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    credits = db.relationship('Credit', backref='product', lazy=True)\n    savings_accounts = db.relationship('SavingsAccount', backref='product', lazy=True)\n\nclass Credit(db.Model):\n    __tablename__ = 'credits'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    credit_number = db.Column(db.String(20), unique=True, nullable=False)\n    client_id = db.Column(db.Integer, db.ForeignKey('clients.id'), nullable=False)\n    product_id = db.Column(db.Integer, db.ForeignKey('products.id'), nullable=False)\n    amount = db.Column(db.Float, nullable=False)\n    interest_rate = db.Column(db.Float, nullable=False)\n    duration_months = db.Column(db.Integer, nullable=False)\n    monthly_payment = db.Column(db.Float, nullable=False)\n    total_amount = db.Column(db.Float, nullable=False)\n    amount_paid = db.Column(db.Float, default=0)\n    status = db.Column(db.String(20), default='pending')\n    application_date = db.Column(db.DateTime, default=datetime.utcnow)\n    approval_date = db.Column(db.DateTime)\n    disbursement_date = db.Column(db.DateTime)\n    notes = db.Column(db.Text)\n    \n    payments = db.relationship('CreditPayment', backref='credit', lazy=True, cascade='all, delete-orphan')\n    \n    @property\n    def balance(self):\n        return self.total_amount - self.amount_paid\n    \n    @property\n    def progress_percentage(self):\n        if self.total_amount > 0:\n            return (self.amount_paid / self.total_amount) * 100\n        return 0\n\nclass CreditPayment(db.Model):\n    __tablename__ = 'credit_payments'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    credit_id = db.Column(db.Integer, db.ForeignKey('credits.id'), nullable=False)\n    amount = db.Column(db.Float, nullable=False)\n    payment_date = db.Column(db.DateTime, default=datetime.utcnow)\n    payment_method = db.Column(db.String(50))\n    reference = db.Column(db.String(100))\n    notes = db.Column(db.Text)\n\nclass SavingsAccount(db.Model):\n    __tablename__ = 'savings_accounts'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    account_number = db.Column(db.String(20), unique=True, nullable=False)\n    client_id = db.Column(db.Integer, db.ForeignKey('clients.id'), nullable=False)\n    product_id = db.Column(db.Integer, db.ForeignKey('products.id'), nullable=False)\n    balance = db.Column(db.Float, default=0)\n    interest_rate = db.Column(db.Float, nullable=False)\n    status = db.Column(db.String(20), default='active')\n    opening_date = db.Column(db.DateTime, default=datetime.utcnow)\n    closing_date = db.Column(db.DateTime)\n    \n    transactions = db.relationship('SavingsTransaction', backref='account', lazy=True, cascade='all, delete-orphan')\n\nclass SavingsTransaction(db.Model):\n    __tablename__ = 'savings_transactions'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    account_id = db.Column(db.Integer, db.ForeignKey('savings_accounts.id'), nullable=False)\n    transaction_type = db.Column(db.String(20), nullable=False)\n    amount = db.Column(db.Float, nullable=False)\n    transaction_date = db.Column(db.DateTime, default=datetime.utcnow)\n    balance_after = db.Column(db.Float, nullable=False)\n    reference = db.Column(db.String(100))\n    notes = db.Column(db.Text)\n","size_bytes":5726}},"version":2}