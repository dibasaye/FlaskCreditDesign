{"file_contents":{"forms.py":{"content":"from flask_wtf import FlaskForm\nfrom wtforms import StringField, PasswordField, EmailField, SelectField, FloatField, IntegerField, TextAreaField, DateField, BooleanField\nfrom wtforms.validators import DataRequired, Email, Length, Optional, NumberRange\n\nclass LoginForm(FlaskForm):\n    username = StringField('Nom d\\'utilisateur', validators=[DataRequired(), Length(min=3, max=80)])\n    password = PasswordField('Mot de passe', validators=[DataRequired()])\n\nclass ClientForm(FlaskForm):\n    first_name = StringField('Prénom', validators=[DataRequired(), Length(max=100)])\n    last_name = StringField('Nom', validators=[DataRequired(), Length(max=100)])\n    email = EmailField('Email', validators=[Optional(), Email()])\n    phone = StringField('Téléphone', validators=[Optional(), Length(max=20)])\n    address = TextAreaField('Adresse', validators=[Optional()])\n    date_of_birth = DateField('Date de naissance', validators=[Optional()], format='%Y-%m-%d')\n    id_number = StringField('Numéro d\\'identité', validators=[Optional(), Length(max=50)])\n\nclass ProductForm(FlaskForm):\n    name = StringField('Nom du produit', validators=[DataRequired(), Length(max=100)])\n    product_type = SelectField('Type de produit', choices=[('credit', 'Crédit'), ('savings', 'Épargne')], validators=[DataRequired()])\n    interest_rate = FloatField('Taux d\\'intérêt (%)', validators=[DataRequired(), NumberRange(min=0, max=100)])\n    min_amount = FloatField('Montant minimum', validators=[Optional(), NumberRange(min=0)])\n    max_amount = FloatField('Montant maximum', validators=[Optional(), NumberRange(min=0)])\n    min_duration = IntegerField('Durée minimum (mois)', validators=[Optional(), NumberRange(min=1)])\n    max_duration = IntegerField('Durée maximum (mois)', validators=[Optional(), NumberRange(min=1)])\n    description = TextAreaField('Description', validators=[Optional()])\n    active = BooleanField('Actif')\n\nclass CreditForm(FlaskForm):\n    client_id = SelectField('Client', coerce=int, validators=[DataRequired()])\n    product_id = SelectField('Produit de crédit', coerce=int, validators=[DataRequired()])\n    amount = FloatField('Montant demandé', validators=[DataRequired(), NumberRange(min=1)])\n    duration_months = IntegerField('Durée (mois)', validators=[DataRequired(), NumberRange(min=1)])\n    notes = TextAreaField('Notes', validators=[Optional()])\n\nclass CreditPaymentForm(FlaskForm):\n    amount = FloatField('Montant du paiement', validators=[DataRequired(), NumberRange(min=0.01)])\n    payment_method = StringField('Méthode de paiement', validators=[Optional(), Length(max=50)])\n    reference = StringField('Référence', validators=[Optional(), Length(max=100)])\n    notes = TextAreaField('Notes', validators=[Optional()])\n\nclass SavingsAccountForm(FlaskForm):\n    client_id = SelectField('Client', coerce=int, validators=[DataRequired()])\n    product_id = SelectField('Produit d\\'épargne', coerce=int, validators=[DataRequired()])\n    initial_deposit = FloatField('Dépôt initial', validators=[Optional(), NumberRange(min=0)])\n\nclass SavingsTransactionForm(FlaskForm):\n    transaction_type = SelectField('Type de transaction', choices=[('deposit', 'Dépôt'), ('withdrawal', 'Retrait')], validators=[DataRequired()])\n    amount = FloatField('Montant', validators=[DataRequired(), NumberRange(min=0.01)])\n    reference = StringField('Référence', validators=[Optional(), Length(max=100)])\n    notes = TextAreaField('Notes', validators=[Optional()])\n\nclass ProfileForm(FlaskForm):\n    username = StringField('Nom d\\'utilisateur', validators=[DataRequired(), Length(min=3, max=80)])\n    email = EmailField('Email', validators=[DataRequired(), Email()])\n\nclass ChangePasswordForm(FlaskForm):\n    current_password = PasswordField('Mot de passe actuel', validators=[DataRequired()])\n    new_password = PasswordField('Nouveau mot de passe', validators=[DataRequired(), Length(min=6)])\n    confirm_password = PasswordField('Confirmer le mot de passe', validators=[DataRequired()])\n\nclass LoanSimulationForm(FlaskForm):\n    product_id = SelectField('Produit de crédit', coerce=int, validators=[DataRequired()])\n    amount = FloatField('Montant souhaité', validators=[DataRequired(), NumberRange(min=1)])\n    duration_months = IntegerField('Durée (mois)', validators=[DataRequired(), NumberRange(min=1)])\n\nclass ClientInteractionForm(FlaskForm):\n    interaction_type = SelectField('Type d\\'interaction', choices=[\n        ('appel', 'Appel téléphonique'),\n        ('visite', 'Visite'),\n        ('email', 'Email'),\n        ('reunion', 'Réunion'),\n        ('autre', 'Autre')\n    ], validators=[DataRequired()])\n    subject = StringField('Sujet', validators=[DataRequired(), Length(max=200)])\n    notes = TextAreaField('Notes', validators=[DataRequired()])\n\nclass SystemSettingsForm(FlaskForm):\n    organization_name = StringField('Nom de l\\'organisation', validators=[DataRequired(), Length(max=200)])\n    currency = StringField('Devise', validators=[DataRequired(), Length(max=10)])\n    language = SelectField('Langue', choices=[('fr', 'Français'), ('en', 'English')], validators=[DataRequired()])\n    date_format = SelectField('Format de date', choices=[\n        ('%d/%m/%Y', 'JJ/MM/AAAA'),\n        ('%m/%d/%Y', 'MM/JJ/AAAA'),\n        ('%Y-%m-%d', 'AAAA-MM-JJ')\n    ], validators=[DataRequired()])\n    penalty_rate = FloatField('Taux de pénalité (%)', validators=[DataRequired(), NumberRange(min=0, max=100)])\n    enable_email_notifications = BooleanField('Activer les notifications par email')\n    enable_sms_notifications = BooleanField('Activer les notifications par SMS')\n    auto_backup_enabled = BooleanField('Activer les sauvegardes automatiques')\n    backup_frequency_days = IntegerField('Fréquence de sauvegarde (jours)', validators=[Optional(), NumberRange(min=1)])\n    late_payment_grace_period = IntegerField('Période de grâce (jours)', validators=[DataRequired(), NumberRange(min=0)])\n    interest_calculation_method = SelectField('Méthode de calcul des intérêts', choices=[\n        ('simple', 'Intérêts simples'),\n        ('compound', 'Intérêts composés')\n    ], validators=[DataRequired()])\n\nclass UserForm(FlaskForm):\n    username = StringField('Nom d\\'utilisateur', validators=[DataRequired(), Length(min=3, max=80)])\n    email = EmailField('Email', validators=[DataRequired(), Email()])\n    password = PasswordField('Mot de passe', validators=[Optional(), Length(min=6)])\n    role = SelectField('Rôle', choices=[\n        ('administrateur', 'Administrateur'),\n        ('gestionnaire', 'Gestionnaire'),\n        ('agent', 'Agent')\n    ], validators=[DataRequired()])\n","size_bytes":6622},"main.py":{"content":"import os\nfrom datetime import datetime\nfrom flask import Flask, render_template, redirect, url_for, flash, request\nfrom flask_login import LoginManager, login_user, logout_user, login_required, current_user\nfrom models import db, User, Client, Product, Credit, CreditPayment, SavingsAccount, SavingsTransaction\nfrom forms import LoginForm, ClientForm, ProductForm, CreditForm, CreditPaymentForm, SavingsAccountForm, SavingsTransactionForm, ProfileForm, ChangePasswordForm\nfrom sqlalchemy import func\nimport random\nimport string\n\napp = Flask(__name__)\napp.secret_key = os.environ.get(\"SESSION_SECRET\") or \"dev-secret-key-change-in-production\"\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = os.environ.get(\"DATABASE_URL\")\napp.config[\"SQLALCHEMY_ENGINE_OPTIONS\"] = {\n    \"pool_recycle\": 300,\n    \"pool_pre_ping\": True,\n}\n\ndb.init_app(app)\n\nlogin_manager = LoginManager()\nlogin_manager.init_app(app)\nlogin_manager.login_view = 'login'\nlogin_manager.login_message = 'Veuillez vous connecter pour accéder à cette page.'\n\n@login_manager.user_loader\ndef load_user(user_id):\n    return User.query.get(int(user_id))\n\ndef generate_unique_id(prefix, model, field):\n    while True:\n        random_part = ''.join(random.choices(string.digits, k=8))\n        unique_id = f\"{prefix}{random_part}\"\n        if not model.query.filter(getattr(model, field) == unique_id).first():\n            return unique_id\n\nwith app.app_context():\n    db.create_all()\n    \n    admin_username = os.environ.get(\"ADMIN_USERNAME\")\n    admin_password = os.environ.get(\"ADMIN_PASSWORD\")\n    admin_email = os.environ.get(\"ADMIN_EMAIL\", \"admin@example.com\")\n    \n    if admin_username and admin_password and not User.query.filter_by(username=admin_username).first():\n        admin = User(username=admin_username, email=admin_email, role='administrateur')\n        admin.set_password(admin_password)\n        db.session.add(admin)\n        db.session.commit()\n        print(f\"Utilisateur administrateur '{admin_username}' créé avec succès\")\n\n@app.route('/')\ndef index():\n    if current_user.is_authenticated:\n        return redirect(url_for('dashboard'))\n    return redirect(url_for('login'))\n\n@app.route('/login', methods=['GET', 'POST'])\ndef login():\n    if current_user.is_authenticated:\n        return redirect(url_for('dashboard'))\n    \n    form = LoginForm()\n    if form.validate_on_submit():\n        user = User.query.filter_by(username=form.username.data).first()\n        if user and user.check_password(form.password.data):\n            login_user(user)\n            flash('Connexion réussie!', 'success')\n            next_page = request.args.get('next')\n            return redirect(next_page) if next_page else redirect(url_for('dashboard'))\n        else:\n            flash('Nom d\\'utilisateur ou mot de passe incorrect', 'danger')\n    return render_template('login.html', form=form)\n\n@app.route('/logout')\n@login_required\ndef logout():\n    logout_user()\n    flash('Déconnexion réussie', 'info')\n    return redirect(url_for('login'))\n\n@app.route('/dashboard')\n@login_required\ndef dashboard():\n    total_clients = Client.query.count()\n    total_credits = Credit.query.count()\n    active_credits = Credit.query.filter_by(status='active').count()\n    total_savings = SavingsAccount.query.count()\n    \n    total_credit_amount = db.session.query(func.sum(Credit.amount)).filter(Credit.status.in_(['active', 'approved', 'disbursed'])).scalar() or 0\n    total_credit_paid = db.session.query(func.sum(Credit.amount_paid)).filter(Credit.status.in_(['active', 'approved', 'disbursed'])).scalar() or 0\n    total_savings_balance = db.session.query(func.sum(SavingsAccount.balance)).filter_by(status='active').scalar() or 0\n    \n    recent_credits = Credit.query.order_by(Credit.application_date.desc()).limit(5).all()\n    recent_clients = Client.query.order_by(Client.created_at.desc()).limit(5).all()\n    \n    pending_credits = Credit.query.filter_by(status='pending').count()\n    \n    credit_products = Product.query.filter_by(product_type='credit', active=True).count()\n    savings_products = Product.query.filter_by(product_type='savings', active=True).count()\n    \n    return render_template('dashboard.html',\n                         total_clients=total_clients,\n                         total_credits=total_credits,\n                         active_credits=active_credits,\n                         total_savings=total_savings,\n                         total_credit_amount=total_credit_amount,\n                         total_credit_paid=total_credit_paid,\n                         total_savings_balance=total_savings_balance,\n                         recent_credits=recent_credits,\n                         recent_clients=recent_clients,\n                         pending_credits=pending_credits,\n                         credit_products=credit_products,\n                         savings_products=savings_products)\n\n@app.route('/clients')\n@login_required\ndef clients():\n    clients_list = Client.query.order_by(Client.created_at.desc()).all()\n    return render_template('clients.html', clients=clients_list)\n\n@app.route('/clients/new', methods=['GET', 'POST'])\n@login_required\ndef new_client():\n    form = ClientForm()\n    if form.validate_on_submit():\n        client = Client(\n            client_id=generate_unique_id('CLT', Client, 'client_id'),\n            first_name=form.first_name.data,\n            last_name=form.last_name.data,\n            email=form.email.data,\n            phone=form.phone.data,\n            address=form.address.data,\n            date_of_birth=form.date_of_birth.data,\n            id_number=form.id_number.data\n        )\n        db.session.add(client)\n        db.session.commit()\n        flash(f'Client {client.full_name} créé avec succès!', 'success')\n        return redirect(url_for('clients'))\n    return render_template('client_form.html', form=form, title='Nouveau Client')\n\n@app.route('/clients/<int:id>/edit', methods=['GET', 'POST'])\n@login_required\ndef edit_client(id):\n    client = Client.query.get_or_404(id)\n    form = ClientForm(obj=client)\n    if form.validate_on_submit():\n        form.populate_obj(client)\n        client.updated_at = datetime.utcnow()\n        db.session.commit()\n        flash(f'Client {client.full_name} mis à jour avec succès!', 'success')\n        return redirect(url_for('client_detail', id=id))\n    return render_template('client_form.html', form=form, title='Modifier Client', client=client)\n\n@app.route('/clients/<int:id>')\n@login_required\ndef client_detail(id):\n    client = Client.query.get_or_404(id)\n    return render_template('client_detail.html', client=client)\n\n@app.route('/clients/<int:id>/delete', methods=['POST'])\n@login_required\ndef delete_client(id):\n    if current_user.role != 'administrateur':\n        flash('Accès non autorisé', 'danger')\n        return redirect(url_for('clients'))\n    \n    client = Client.query.get_or_404(id)\n    db.session.delete(client)\n    db.session.commit()\n    flash(f'Client {client.full_name} supprimé avec succès!', 'success')\n    return redirect(url_for('clients'))\n\n@app.route('/products')\n@login_required\ndef products():\n    products_list = Product.query.order_by(Product.created_at.desc()).all()\n    return render_template('products.html', products=products_list)\n\n@app.route('/products/new', methods=['GET', 'POST'])\n@login_required\ndef new_product():\n    form = ProductForm()\n    if form.validate_on_submit():\n        product = Product(\n            name=form.name.data,\n            product_type=form.product_type.data,\n            interest_rate=form.interest_rate.data,\n            min_amount=form.min_amount.data,\n            max_amount=form.max_amount.data,\n            min_duration=form.min_duration.data,\n            max_duration=form.max_duration.data,\n            description=form.description.data,\n            active=form.active.data\n        )\n        db.session.add(product)\n        db.session.commit()\n        flash(f'Produit {product.name} créé avec succès!', 'success')\n        return redirect(url_for('products'))\n    return render_template('product_form.html', form=form, title='Nouveau Produit')\n\n@app.route('/products/<int:id>/edit', methods=['GET', 'POST'])\n@login_required\ndef edit_product(id):\n    product = Product.query.get_or_404(id)\n    form = ProductForm(obj=product)\n    if form.validate_on_submit():\n        form.populate_obj(product)\n        db.session.commit()\n        flash(f'Produit {product.name} mis à jour avec succès!', 'success')\n        return redirect(url_for('products'))\n    return render_template('product_form.html', form=form, title='Modifier Produit', product=product)\n\n@app.route('/credits')\n@login_required\ndef credits():\n    credits_list = Credit.query.order_by(Credit.application_date.desc()).all()\n    return render_template('credits.html', credits=credits_list)\n\n@app.route('/credits/new', methods=['GET', 'POST'])\n@login_required\ndef new_credit():\n    form = CreditForm()\n    form.client_id.choices = [(c.id, c.full_name) for c in Client.query.order_by(Client.last_name).all()]\n    form.product_id.choices = [(p.id, p.name) for p in Product.query.filter_by(product_type='credit', active=True).all()]\n    \n    if form.validate_on_submit():\n        product = Product.query.get(form.product_id.data)\n        amount = form.amount.data\n        duration = form.duration_months.data\n        rate = product.interest_rate / 100 / 12\n        \n        if rate > 0:\n            monthly_payment = (amount * rate * (1 + rate)**duration) / ((1 + rate)**duration - 1)\n        else:\n            monthly_payment = amount / duration\n        \n        total_amount = monthly_payment * duration\n        \n        credit = Credit(\n            credit_number=generate_unique_id('CRD', Credit, 'credit_number'),\n            client_id=form.client_id.data,\n            product_id=form.product_id.data,\n            amount=amount,\n            interest_rate=product.interest_rate,\n            duration_months=duration,\n            monthly_payment=round(monthly_payment, 2),\n            total_amount=round(total_amount, 2),\n            notes=form.notes.data,\n            status='pending'\n        )\n        db.session.add(credit)\n        db.session.commit()\n        flash(f'Demande de crédit {credit.credit_number} créée avec succès!', 'success')\n        return redirect(url_for('credits'))\n    \n    return render_template('credit_form.html', form=form, title='Nouvelle Demande de Crédit')\n\n@app.route('/credits/<int:id>')\n@login_required\ndef credit_detail(id):\n    credit = Credit.query.get_or_404(id)\n    payment_form = CreditPaymentForm()\n    return render_template('credit_detail.html', credit=credit, payment_form=payment_form)\n\n@app.route('/credits/<int:id>/approve', methods=['POST'])\n@login_required\ndef approve_credit(id):\n    if current_user.role not in ['administrateur', 'gestionnaire']:\n        flash('Accès non autorisé', 'danger')\n        return redirect(url_for('credits'))\n    \n    credit = Credit.query.get_or_404(id)\n    credit.status = 'approved'\n    credit.approval_date = datetime.utcnow()\n    db.session.commit()\n    flash(f'Crédit {credit.credit_number} approuvé avec succès!', 'success')\n    return redirect(url_for('credit_detail', id=id))\n\n@app.route('/credits/<int:id>/disburse', methods=['POST'])\n@login_required\ndef disburse_credit(id):\n    if current_user.role not in ['administrateur', 'gestionnaire']:\n        flash('Accès non autorisé', 'danger')\n        return redirect(url_for('credits'))\n    \n    credit = Credit.query.get_or_404(id)\n    if credit.status == 'approved':\n        credit.status = 'active'\n        credit.disbursement_date = datetime.utcnow()\n        db.session.commit()\n        flash(f'Crédit {credit.credit_number} décaissé avec succès!', 'success')\n    return redirect(url_for('credit_detail', id=id))\n\n@app.route('/credits/<int:id>/payment', methods=['POST'])\n@login_required\ndef add_credit_payment(id):\n    credit = Credit.query.get_or_404(id)\n    form = CreditPaymentForm()\n    \n    if form.validate_on_submit():\n        payment = CreditPayment(\n            credit_id=id,\n            amount=form.amount.data,\n            payment_method=form.payment_method.data,\n            reference=form.reference.data,\n            notes=form.notes.data\n        )\n        credit.amount_paid += form.amount.data\n        \n        if credit.amount_paid >= credit.total_amount:\n            credit.status = 'completed'\n        \n        db.session.add(payment)\n        db.session.commit()\n        flash(f'Paiement de {form.amount.data} enregistré avec succès!', 'success')\n    \n    return redirect(url_for('credit_detail', id=id))\n\n@app.route('/savings')\n@login_required\ndef savings():\n    savings_list = SavingsAccount.query.order_by(SavingsAccount.opening_date.desc()).all()\n    return render_template('savings.html', savings=savings_list)\n\n@app.route('/savings/new', methods=['GET', 'POST'])\n@login_required\ndef new_savings():\n    form = SavingsAccountForm()\n    form.client_id.choices = [(c.id, c.full_name) for c in Client.query.order_by(Client.last_name).all()]\n    form.product_id.choices = [(p.id, p.name) for p in Product.query.filter_by(product_type='savings', active=True).all()]\n    \n    if form.validate_on_submit():\n        product = Product.query.get(form.product_id.data)\n        account = SavingsAccount(\n            account_number=generate_unique_id('SAV', SavingsAccount, 'account_number'),\n            client_id=form.client_id.data,\n            product_id=form.product_id.data,\n            interest_rate=product.interest_rate,\n            balance=form.initial_deposit.data or 0\n        )\n        db.session.add(account)\n        \n        if form.initial_deposit.data and form.initial_deposit.data > 0:\n            transaction = SavingsTransaction(\n                account_id=account.id,\n                transaction_type='deposit',\n                amount=form.initial_deposit.data,\n                balance_after=form.initial_deposit.data,\n                notes='Dépôt initial'\n            )\n            db.session.add(transaction)\n        \n        db.session.commit()\n        flash(f'Compte d\\'épargne {account.account_number} créé avec succès!', 'success')\n        return redirect(url_for('savings'))\n    \n    return render_template('savings_form.html', form=form, title='Nouveau Compte d\\'Épargne')\n\n@app.route('/savings/<int:id>')\n@login_required\ndef savings_detail(id):\n    account = SavingsAccount.query.get_or_404(id)\n    transaction_form = SavingsTransactionForm()\n    return render_template('savings_detail.html', account=account, transaction_form=transaction_form)\n\n@app.route('/savings/<int:id>/transaction', methods=['POST'])\n@login_required\ndef add_savings_transaction(id):\n    account = SavingsAccount.query.get_or_404(id)\n    form = SavingsTransactionForm()\n    \n    if form.validate_on_submit():\n        amount = form.amount.data\n        transaction_type = form.transaction_type.data\n        \n        if transaction_type == 'withdrawal' and amount > account.balance:\n            flash('Solde insuffisant pour ce retrait', 'danger')\n            return redirect(url_for('savings_detail', id=id))\n        \n        if transaction_type == 'deposit':\n            account.balance += amount\n        else:\n            account.balance -= amount\n        \n        transaction = SavingsTransaction(\n            account_id=id,\n            transaction_type=transaction_type,\n            amount=amount,\n            balance_after=account.balance,\n            reference=form.reference.data,\n            notes=form.notes.data\n        )\n        db.session.add(transaction)\n        db.session.commit()\n        flash(f'Transaction de {amount} enregistrée avec succès!', 'success')\n    \n    return redirect(url_for('savings_detail', id=id))\n\n@app.route('/settings', methods=['GET', 'POST'])\n@login_required\ndef settings():\n    profile_form = ProfileForm(obj=current_user)\n    password_form = ChangePasswordForm()\n    \n    if profile_form.validate_on_submit() and 'profile_submit' in request.form:\n        existing_user = User.query.filter(User.username == profile_form.username.data, User.id != current_user.id).first()\n        if existing_user:\n            flash('Ce nom d\\'utilisateur est déjà utilisé', 'danger')\n        else:\n            current_user.username = profile_form.username.data\n            current_user.email = profile_form.email.data\n            db.session.commit()\n            flash('Profil mis à jour avec succès!', 'success')\n            return redirect(url_for('settings'))\n    \n    if password_form.validate_on_submit() and 'password_submit' in request.form:\n        if not current_user.check_password(password_form.current_password.data):\n            flash('Mot de passe actuel incorrect', 'danger')\n        elif password_form.new_password.data != password_form.confirm_password.data:\n            flash('Les nouveaux mots de passe ne correspondent pas', 'danger')\n        else:\n            current_user.set_password(password_form.new_password.data)\n            db.session.commit()\n            flash('Mot de passe changé avec succès!', 'success')\n            return redirect(url_for('settings'))\n    \n    return render_template('settings.html', profile_form=profile_form, password_form=password_form)\n\n@app.template_filter('currency')\ndef currency_filter(value):\n    if value is None:\n        value = 0\n    return f\"{value:,.2f} FCFA\"\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000, debug=True)\n","size_bytes":17417},"static/css/style.css":{"content":":root {\n    --primary-color: #2563eb;\n    --secondary-color: #059669;\n    --accent-color: #8b5cf6;\n    --warning-color: #f59e0b;\n    --danger-color: #ef4444;\n    --dark-color: #1e293b;\n    --light-bg: #f8fafc;\n    --card-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);\n    --card-shadow-hover: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);\n}\n\nbody {\n    font-family: 'Inter', 'Segoe UI', -apple-system, BlinkMacSystemFont, sans-serif;\n    background-color: var(--light-bg);\n    color: var(--dark-color);\n}\n\n.navbar {\n    background: linear-gradient(135deg, #2563eb 0%, #1d4ed8 100%) !important;\n    box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n}\n\n.brand-text {\n    font-weight: 700;\n    font-size: 1.3rem;\n    letter-spacing: -0.5px;\n}\n\n.page-title {\n    font-weight: 700;\n    color: var(--dark-color);\n    margin-bottom: 0.5rem;\n}\n\n.stats-card {\n    background: white;\n    border-radius: 12px;\n    padding: 1.5rem;\n    box-shadow: var(--card-shadow);\n    transition: all 0.3s ease;\n    border: none;\n    overflow: hidden;\n    position: relative;\n}\n\n.stats-card:hover {\n    transform: translateY(-5px);\n    box-shadow: var(--card-shadow-hover);\n}\n\n.stats-card::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    height: 4px;\n}\n\n.stats-card-blue::before {\n    background: linear-gradient(90deg, #2563eb, #3b82f6);\n}\n\n.stats-card-green::before {\n    background: linear-gradient(90deg, #059669, #10b981);\n}\n\n.stats-card-purple::before {\n    background: linear-gradient(90deg, #8b5cf6, #a78bfa);\n}\n\n.stats-card-orange::before {\n    background: linear-gradient(90deg, #f59e0b, #fbbf24);\n}\n\n.stats-icon {\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    width: 60px;\n    height: 60px;\n    border-radius: 12px;\n    font-size: 1.8rem;\n    float: left;\n    margin-right: 1rem;\n}\n\n.stats-card-blue .stats-icon {\n    background: linear-gradient(135deg, #dbeafe, #bfdbfe);\n    color: #2563eb;\n}\n\n.stats-card-green .stats-icon {\n    background: linear-gradient(135deg, #d1fae5, #a7f3d0);\n    color: #059669;\n}\n\n.stats-card-purple .stats-icon {\n    background: linear-gradient(135deg, #ede9fe, #ddd6fe);\n    color: #8b5cf6;\n}\n\n.stats-card-orange .stats-icon {\n    background: linear-gradient(135deg, #fef3c7, #fde68a);\n    color: #f59e0b;\n}\n\n.stats-content h3 {\n    font-size: 2rem;\n    font-weight: 700;\n    margin: 0;\n    color: var(--dark-color);\n}\n\n.stats-content p {\n    margin: 0;\n    color: #64748b;\n    font-size: 0.95rem;\n}\n\n.card {\n    border-radius: 12px;\n    border: none;\n    box-shadow: var(--card-shadow);\n    transition: all 0.3s ease;\n}\n\n.card:hover {\n    box-shadow: var(--card-shadow-hover);\n}\n\n.card-header {\n    border-radius: 12px 12px 0 0 !important;\n    border-bottom: none;\n    padding: 1rem 1.5rem;\n    font-weight: 600;\n}\n\n.btn {\n    border-radius: 8px;\n    padding: 0.6rem 1.2rem;\n    font-weight: 500;\n    transition: all 0.2s ease;\n    border: none;\n}\n\n.btn:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n}\n\n.btn-primary {\n    background: linear-gradient(135deg, #2563eb, #1d4ed8);\n}\n\n.btn-success {\n    background: linear-gradient(135deg, #059669, #047857);\n}\n\n.btn-warning {\n    background: linear-gradient(135deg, #f59e0b, #d97706);\n}\n\n.btn-danger {\n    background: linear-gradient(135deg, #ef4444, #dc2626);\n}\n\n.btn-info {\n    background: linear-gradient(135deg, #06b6d4, #0891b2);\n}\n\n.table {\n    border-radius: 8px;\n    overflow: hidden;\n}\n\n.table thead {\n    background: linear-gradient(135deg, #f1f5f9, #e2e8f0);\n}\n\n.table-hover tbody tr:hover {\n    background-color: #f8fafc;\n    cursor: pointer;\n}\n\n.badge {\n    padding: 0.4rem 0.8rem;\n    font-weight: 500;\n    border-radius: 6px;\n}\n\n.login-container {\n    min-height: 100vh;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n    padding: 2rem;\n}\n\n.login-card {\n    background: white;\n    padding: 3rem;\n    border-radius: 20px;\n    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);\n    width: 100%;\n    max-width: 450px;\n    animation: slideUp 0.5s ease;\n}\n\n@keyframes slideUp {\n    from {\n        opacity: 0;\n        transform: translateY(30px);\n    }\n    to {\n        opacity: 1;\n        transform: translateY(0);\n    }\n}\n\n.login-icon {\n    width: 80px;\n    height: 80px;\n    background: linear-gradient(135deg, #2563eb, #1d4ed8);\n    border-radius: 50%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    margin: 0 auto 1rem;\n    color: white;\n    font-size: 2.5rem;\n    box-shadow: 0 10px 30px rgba(37, 99, 235, 0.3);\n}\n\n.login-title {\n    color: var(--dark-color);\n    font-weight: 700;\n    margin-bottom: 0.5rem;\n}\n\n.form-control {\n    border-radius: 8px;\n    border: 2px solid #e2e8f0;\n    padding: 0.75rem 1rem;\n    transition: all 0.3s ease;\n}\n\n.form-control:focus {\n    border-color: #2563eb;\n    box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);\n}\n\n.alert {\n    border-radius: 10px;\n    border: none;\n    padding: 1rem 1.5rem;\n}\n\n.animated {\n    animation-duration: 0.5s;\n}\n\n.fadeInDown {\n    animation-name: fadeInDown;\n}\n\n@keyframes fadeInDown {\n    from {\n        opacity: 0;\n        transform: translateY(-20px);\n    }\n    to {\n        opacity: 1;\n        transform: translateY(0);\n    }\n}\n\n.progress {\n    border-radius: 10px;\n    overflow: hidden;\n    background-color: #e2e8f0;\n}\n\n.progress-bar {\n    background: linear-gradient(90deg, #059669, #10b981);\n    transition: width 0.6s ease;\n}\n\n.list-group-item {\n    border-radius: 8px !important;\n    margin-bottom: 0.5rem;\n    border: 1px solid #e2e8f0;\n    transition: all 0.2s ease;\n}\n\n.list-group-item:hover {\n    background-color: #f8fafc;\n    transform: translateX(5px);\n}\n\n.product-stat {\n    padding: 1rem;\n    border-radius: 8px;\n    background: #f8fafc;\n}\n\n.nav-link {\n    transition: all 0.3s ease;\n    border-radius: 6px;\n    margin: 0 0.2rem;\n}\n\n.nav-link:hover {\n    background-color: rgba(255, 255, 255, 0.1);\n}\n\n.nav-link.active {\n    background-color: rgba(255, 255, 255, 0.2);\n    font-weight: 600;\n}\n\n.nav-tabs {\n    border-bottom: 2px solid #e2e8f0;\n}\n\n.nav-tabs .nav-link {\n    border: none;\n    color: #64748b;\n    padding: 1rem 1.5rem;\n    font-weight: 500;\n    margin-right: 0.5rem;\n    transition: all 0.3s ease;\n}\n\n.nav-tabs .nav-link:hover {\n    background-color: #f8fafc;\n    color: var(--primary-color);\n}\n\n.nav-tabs .nav-link.active {\n    background-color: white;\n    color: var(--primary-color);\n    border-bottom: 3px solid var(--primary-color);\n    font-weight: 600;\n}\n\n.tab-content {\n    animation: fadeIn 0.5s ease;\n}\n\n@keyframes fadeIn {\n    from {\n        opacity: 0;\n        transform: translateY(10px);\n    }\n    to {\n        opacity: 1;\n        transform: translateY(0);\n    }\n}\n\n.list-group-item-primary {\n    background-color: #dbeafe;\n    border-color: #93c5fd;\n}\n\n.notification-badge {\n    animation: pulse 2s infinite;\n}\n\n@keyframes pulse {\n    0%, 100% {\n        opacity: 1;\n    }\n    50% {\n        opacity: 0.8;\n    }\n}\n\n.form-check-input:checked {\n    background-color: var(--primary-color);\n    border-color: var(--primary-color);\n}\n\n.breadcrumb {\n    background-color: transparent;\n    padding: 0.5rem 0;\n}\n\n.breadcrumb-item a {\n    color: var(--primary-color);\n    text-decoration: none;\n}\n\n.breadcrumb-item a:hover {\n    text-decoration: underline;\n}\n\n.breadcrumb-item.active {\n    color: #64748b;\n}\n\n.table-responsive {\n    border-radius: 8px;\n    box-shadow: var(--card-shadow);\n}\n\n@media (max-width: 768px) {\n    .stats-card {\n        margin-bottom: 1rem;\n    }\n    \n    .login-card {\n        padding: 2rem;\n    }\n    \n    .stats-content h3 {\n        font-size: 1.5rem;\n    }\n    \n    .nav-tabs .nav-link {\n        padding: 0.75rem 1rem;\n        font-size: 0.9rem;\n    }\n}\n","size_bytes":7849},"replit.md":{"content":"# FinanceManager - Système de Gestion de Crédit & Épargne\n\n## Vue d'ensemble\nApplication web Flask complète pour la gestion des produits de crédit et d'épargne destinée aux institutions financières (banques, coopératives, microfinance).\n\n## Fonctionnalités principales\n\n### Gestion des Clients\n- Création et modification des profils clients avec identifiants uniques\n- Informations complètes (nom, email, téléphone, adresse, date de naissance, numéro d'identité)\n- Historique complet des crédits et comptes d'épargne\n- Vue détaillée de chaque client\n\n### Gestion des Produits\n- Création de produits de crédit et d'épargne\n- Paramétrage des taux d'intérêt, montants min/max, durées\n- Activation/désactivation des produits\n- Description et conditions personnalisables\n\n### Gestion des Crédits\n- Soumission de demandes de crédit\n- Workflow d'approbation (Pending → Approved → Active → Completed)\n- Calcul automatique des intérêts et échéances mensuelles\n- Suivi des remboursements avec barre de progression\n- Historique complet des paiements\n- Contrôle d'accès par rôle pour approbation/décaissement\n\n### Gestion de l'Épargne\n- Ouverture de comptes d'épargne\n- Dépôts et retraits avec validation de solde\n- Calcul automatique et affichage du solde après transaction\n- Historique détaillé des transactions\n- Paramétrage des taux d'intérêt par produit\n\n### Tableau de Bord\n- Statistiques en temps réel (clients, crédits actifs, épargne totale, demandes en attente)\n- Graphiques interactifs (Chart.js) pour visualisation des données\n- Montants totaux décaissés, remboursés et restants\n- Liste des crédits et clients récents\n\n### Authentification & Sécurité\n- Système de connexion sécurisé avec Flask-Login\n- Gestion des rôles (administrateur, gestionnaire, agent)\n- Mots de passe hashés avec Werkzeug\n- Compte administrateur configuré via variables d'environnement sécurisées\n- Protection des routes selon les rôles\n- Pas de mots de passe en dur dans le code\n\n## Architecture Technique\n\n### Backend\n- **Framework**: Flask 3.1.2\n- **ORM**: SQLAlchemy avec Flask-SQLAlchemy\n- **Base de données**: PostgreSQL (Neon)\n- **Authentification**: Flask-Login\n- **Formulaires**: Flask-WTF avec validation\n- **Sécurité**: Werkzeug pour hashage de mots de passe\n\n### Frontend\n- **Framework CSS**: Bootstrap 5.3.0\n- **Icônes**: Font Awesome 6.4.0\n- **Graphiques**: Chart.js 4.4.0\n- **Design**: CSS personnalisé avec palette de couleurs professionnelle\n- **Animations**: Transitions CSS fluides et modernes\n- **Responsive**: Interface adaptée mobile et desktop\n\n### Modèles de Données\n1. **User**: Utilisateurs avec rôles\n2. **Client**: Clients de l'institution\n3. **Product**: Produits de crédit et d'épargne\n4. **Credit**: Demandes et suivi de crédits\n5. **CreditPayment**: Paiements de remboursement\n6. **SavingsAccount**: Comptes d'épargne\n7. **SavingsTransaction**: Transactions d'épargne\n\n## Structure du Projet\n```\n.\n├── main.py                 # Application Flask principale\n├── models.py               # Modèles SQLAlchemy\n├── forms.py                # Formulaires WTForms\n├── templates/              # Templates Jinja2\n│   ├── base.html\n│   ├── login.html\n│   ├── dashboard.html\n│   ├── clients.html\n│   ├── client_form.html\n│   ├── client_detail.html\n│   ├── products.html\n│   ├── product_form.html\n│   ├── credits.html\n│   ├── credit_form.html\n│   ├── credit_detail.html\n│   ├── savings.html\n│   ├── savings_form.html\n│   └── savings_detail.html\n└── static/\n    └── css/\n        └── style.css       # Styles personnalisés\n```\n\n## Design & Interface\n- **Palette de couleurs**: Bleu professionnel (#2563eb), vert (#059669), violet (#8b5cf6)\n- **Style**: Moderne, épuré avec dégradés subtils\n- **Cartes**: Ombres douces, coins arrondis, animations au survol\n- **Navigation**: Barre de navigation fixe avec menu déroulant utilisateur\n- **Formulaires**: Champs bien espacés, validation visuelle\n- **Tableaux**: Hover effects, tri visuel\n\n## Configuration Requise\n\n### Variables d'Environnement\n- `DATABASE_URL`: URL de connexion PostgreSQL\n- `SESSION_SECRET`: Clé secrète pour les sessions Flask\n- `ADMIN_USERNAME`: Nom d'utilisateur administrateur initial\n- `ADMIN_PASSWORD`: Mot de passe administrateur initial\n- `ADMIN_EMAIL`: Email de l'administrateur\n\n### Dépendances Python\n- flask\n- flask-login\n- flask-wtf\n- flask-sqlalchemy\n- psycopg2-binary\n- python-dateutil\n- email-validator\n\n## Déploiement\nLe serveur démarre sur `0.0.0.0:5000` en mode debug pour le développement.\n\n## Fonctionnalités Récentes (Octobre 2025)\n- ✅ **Simulation de prêts** : Calculateur interactif sans création de crédit\n- ✅ **Échéancier de paiement** : Génération automatique lors du décaissement\n- ✅ **Calcul des pénalités** : Pénalités automatiques pour retards de paiement\n- ✅ **Intérêts d'épargne** : Calcul et application automatique des intérêts\n- ✅ **Clôture de comptes** : Fermeture sécurisée des comptes d'épargne\n- ✅ **Audit trail** : Traçabilité complète des activités importantes\n- ✅ **Historique des interactions** : Suivi des communications avec les clients\n- ✅ **Analyse de solvabilité** : Score de crédit automatique pour chaque client\n- ✅ **Rapports avancés** : Tableaux de bord avec analyses de performance et risques\n- ✅ **Gestion des garanties** : Enregistrement des garanties pour les crédits\n\n### Nouvelles Fonctionnalités Avancées (23 Octobre 2025)\n- ✅ **Page Paramètres Complète** : Interface à onglets pour configuration système\n  - Profil utilisateur et changement de mot de passe\n  - Paramètres système (devise, langue, format date, taux de pénalité)\n  - Gestion des notifications et sauvegardes automatiques\n  - Méthodes de calcul des intérêts configurables\n  \n- ✅ **Gestion des Utilisateurs** : Administration complète des comptes\n  - Création, modification et suppression d'utilisateurs\n  - Gestion des rôles (Administrateur, Gestionnaire, Agent)\n  - Interface intuitive avec contrôles de sécurité\n  \n- ✅ **Système de Notifications** : Centre de notifications intégré\n  - Badge de notifications non lues dans la navigation\n  - Page dédiée avec pagination\n  - Marquage individuel ou global des notifications\n  - Types de notifications (crédits, paiements, alertes, système)\n  \n- ✅ **Export de Données** : Extraction CSV pour analyse\n  - Export complet des clients avec toutes informations\n  - Export des crédits avec détails et statuts\n  - Export des comptes d'épargne et soldes\n  - Fichiers CSV formatés et prêts pour Excel\n  \n- ✅ **Design Moderne et Responsive** : Interface professionnelle\n  - Animations fluides et transitions élégantes\n  - Onglets Bootstrap avec effets visuels\n  - Badge de notifications animé\n  - Fil d'Ariane (breadcrumbs) pour navigation\n  - Interface adaptative mobile et desktop\n\n## Améliorations Futures\n- Génération de rapports PDF exportables avec graphiques\n- Système d'alertes automatiques par email/SMS\n- Recherche et filtrage avancés dans toutes les sections\n- API REST pour intégrations tierces\n- Gestion des documents et pièces jointes\n","size_bytes":7325},"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"email-validator>=2.3.0\",\n    \"flask>=3.1.2\",\n    \"flask-login>=0.6.3\",\n    \"flask-sqlalchemy>=3.1.1\",\n    \"flask-wtf>=1.2.2\",\n    \"psycopg2-binary>=2.9.11\",\n    \"python-dateutil>=2.9.0.post0\",\n    \"python-dotenv>=1.1.1\",\n    \"sqlalchemy>=2.0.44\",\n    \"werkzeug>=3.1.3\",\n    \"wtforms>=3.2.1\",\n]\n","size_bytes":441},"models.py":{"content":"import os\nfrom datetime import datetime\nfrom flask_sqlalchemy import SQLAlchemy\nfrom sqlalchemy.orm import DeclarativeBase\nfrom flask_login import UserMixin\nfrom werkzeug.security import generate_password_hash, check_password_hash\n\nclass Base(DeclarativeBase):\n    pass\n\ndb = SQLAlchemy(model_class=Base)\n\nclass User(UserMixin, db.Model):\n    __tablename__ = 'users'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(80), unique=True, nullable=False)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    password_hash = db.Column(db.String(255), nullable=False)\n    role = db.Column(db.String(20), nullable=False, default='agent')\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    def set_password(self, password):\n        self.password_hash = generate_password_hash(password)\n    \n    def check_password(self, password):\n        return check_password_hash(self.password_hash, password)\n\nclass Client(db.Model):\n    __tablename__ = 'clients'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    client_id = db.Column(db.String(20), unique=True, nullable=False)\n    first_name = db.Column(db.String(100), nullable=False)\n    last_name = db.Column(db.String(100), nullable=False)\n    email = db.Column(db.String(120))\n    phone = db.Column(db.String(20))\n    address = db.Column(db.Text)\n    date_of_birth = db.Column(db.Date)\n    id_number = db.Column(db.String(50))\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\n    \n    credits = db.relationship('Credit', backref='client', lazy=True, cascade='all, delete-orphan')\n    savings_accounts = db.relationship('SavingsAccount', backref='client', lazy=True, cascade='all, delete-orphan')\n    \n    @property\n    def full_name(self):\n        return f\"{self.first_name} {self.last_name}\"\n\nclass Product(db.Model):\n    __tablename__ = 'products'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(100), nullable=False)\n    product_type = db.Column(db.String(20), nullable=False)\n    interest_rate = db.Column(db.Float, nullable=False)\n    min_amount = db.Column(db.Float, default=0)\n    max_amount = db.Column(db.Float)\n    min_duration = db.Column(db.Integer)\n    max_duration = db.Column(db.Integer)\n    description = db.Column(db.Text)\n    active = db.Column(db.Boolean, default=True)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    credits = db.relationship('Credit', backref='product', lazy=True)\n    savings_accounts = db.relationship('SavingsAccount', backref='product', lazy=True)\n\nclass Credit(db.Model):\n    __tablename__ = 'credits'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    credit_number = db.Column(db.String(20), unique=True, nullable=False)\n    client_id = db.Column(db.Integer, db.ForeignKey('clients.id'), nullable=False)\n    product_id = db.Column(db.Integer, db.ForeignKey('products.id'), nullable=False)\n    amount = db.Column(db.Float, nullable=False)\n    interest_rate = db.Column(db.Float, nullable=False)\n    duration_months = db.Column(db.Integer, nullable=False)\n    monthly_payment = db.Column(db.Float, nullable=False)\n    total_amount = db.Column(db.Float, nullable=False)\n    amount_paid = db.Column(db.Float, default=0)\n    penalty_amount = db.Column(db.Float, default=0)\n    status = db.Column(db.String(20), default='pending')\n    application_date = db.Column(db.DateTime, default=datetime.utcnow)\n    approval_date = db.Column(db.DateTime)\n    disbursement_date = db.Column(db.DateTime)\n    notes = db.Column(db.Text)\n    collateral = db.Column(db.Text)\n    credit_score = db.Column(db.Float)\n    \n    payments = db.relationship('CreditPayment', backref='credit', lazy=True, cascade='all, delete-orphan')\n    payment_schedule = db.relationship('PaymentSchedule', backref='credit', lazy=True, cascade='all, delete-orphan')\n    \n    @property\n    def balance(self):\n        return self.total_amount + self.penalty_amount - self.amount_paid\n    \n    @property\n    def progress_percentage(self):\n        if self.total_amount > 0:\n            return (self.amount_paid / self.total_amount) * 100\n        return 0\n    \n    @property\n    def overdue_installments(self):\n        from datetime import datetime\n        return [s for s in self.payment_schedule if s.due_date < datetime.now().date() and not s.paid]\n\nclass CreditPayment(db.Model):\n    __tablename__ = 'credit_payments'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    credit_id = db.Column(db.Integer, db.ForeignKey('credits.id'), nullable=False)\n    amount = db.Column(db.Float, nullable=False)\n    payment_date = db.Column(db.DateTime, default=datetime.utcnow)\n    payment_method = db.Column(db.String(50))\n    reference = db.Column(db.String(100))\n    notes = db.Column(db.Text)\n\nclass SavingsAccount(db.Model):\n    __tablename__ = 'savings_accounts'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    account_number = db.Column(db.String(20), unique=True, nullable=False)\n    client_id = db.Column(db.Integer, db.ForeignKey('clients.id'), nullable=False)\n    product_id = db.Column(db.Integer, db.ForeignKey('products.id'), nullable=False)\n    balance = db.Column(db.Float, default=0)\n    interest_rate = db.Column(db.Float, nullable=False)\n    status = db.Column(db.String(20), default='active')\n    opening_date = db.Column(db.DateTime, default=datetime.utcnow)\n    closing_date = db.Column(db.DateTime)\n    \n    transactions = db.relationship('SavingsTransaction', backref='account', lazy=True, cascade='all, delete-orphan')\n\nclass SavingsTransaction(db.Model):\n    __tablename__ = 'savings_transactions'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    account_id = db.Column(db.Integer, db.ForeignKey('savings_accounts.id'), nullable=False)\n    transaction_type = db.Column(db.String(20), nullable=False)\n    amount = db.Column(db.Float, nullable=False)\n    transaction_date = db.Column(db.DateTime, default=datetime.utcnow)\n    balance_after = db.Column(db.Float, nullable=False)\n    reference = db.Column(db.String(100))\n    notes = db.Column(db.Text)\n\nclass PaymentSchedule(db.Model):\n    __tablename__ = 'payment_schedule'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    credit_id = db.Column(db.Integer, db.ForeignKey('credits.id'), nullable=False)\n    installment_number = db.Column(db.Integer, nullable=False)\n    due_date = db.Column(db.Date, nullable=False)\n    expected_amount = db.Column(db.Float, nullable=False)\n    paid = db.Column(db.Boolean, default=False)\n    paid_date = db.Column(db.Date)\n    paid_amount = db.Column(db.Float, default=0)\n\nclass AuditLog(db.Model):\n    __tablename__ = 'audit_logs'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    user_id = db.Column(db.Integer, db.ForeignKey('users.id'))\n    action = db.Column(db.String(100), nullable=False)\n    entity_type = db.Column(db.String(50))\n    entity_id = db.Column(db.Integer)\n    details = db.Column(db.Text)\n    ip_address = db.Column(db.String(50))\n    timestamp = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    user = db.relationship('User', backref='audit_logs')\n\nclass ClientInteraction(db.Model):\n    __tablename__ = 'client_interactions'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    client_id = db.Column(db.Integer, db.ForeignKey('clients.id'), nullable=False)\n    user_id = db.Column(db.Integer, db.ForeignKey('users.id'))\n    interaction_type = db.Column(db.String(50), nullable=False)\n    subject = db.Column(db.String(200))\n    notes = db.Column(db.Text)\n    interaction_date = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    client = db.relationship('Client', backref='interactions')\n    user = db.relationship('User', backref='client_interactions')\n\nclass SystemSettings(db.Model):\n    __tablename__ = 'system_settings'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    organization_name = db.Column(db.String(200), default='FinanceManager')\n    currency = db.Column(db.String(10), default='FCFA')\n    language = db.Column(db.String(10), default='fr')\n    date_format = db.Column(db.String(20), default='%d/%m/%Y')\n    penalty_rate = db.Column(db.Float, default=5.0)\n    enable_email_notifications = db.Column(db.Boolean, default=False)\n    enable_sms_notifications = db.Column(db.Boolean, default=False)\n    auto_backup_enabled = db.Column(db.Boolean, default=False)\n    backup_frequency_days = db.Column(db.Integer, default=7)\n    late_payment_grace_period = db.Column(db.Integer, default=3)\n    interest_calculation_method = db.Column(db.String(20), default='simple')\n    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\n\nclass Notification(db.Model):\n    __tablename__ = 'notifications'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    user_id = db.Column(db.Integer, db.ForeignKey('users.id'))\n    title = db.Column(db.String(200), nullable=False)\n    message = db.Column(db.Text, nullable=False)\n    notification_type = db.Column(db.String(50))\n    related_entity_type = db.Column(db.String(50))\n    related_entity_id = db.Column(db.Integer)\n    is_read = db.Column(db.Boolean, default=False)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    user = db.relationship('User', backref='notifications')\n\nclass CreditDocument(db.Model):\n    __tablename__ = 'credit_documents'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    credit_id = db.Column(db.Integer, db.ForeignKey('credits.id'), nullable=False)\n    document_type = db.Column(db.String(50), nullable=False)\n    file_name = db.Column(db.String(255), nullable=False)\n    file_path = db.Column(db.String(500), nullable=False)\n    file_size = db.Column(db.Integer)\n    uploaded_by = db.Column(db.Integer, db.ForeignKey('users.id'))\n    upload_date = db.Column(db.DateTime, default=datetime.utcnow)\n    notes = db.Column(db.Text)\n    \n    credit = db.relationship('Credit', backref='documents')\n    uploader = db.relationship('User', backref='uploaded_documents')\n","size_bytes":10090},"app.py":{"content":"import os\nfrom datetime import datetime\nfrom dotenv import load_dotenv\nfrom flask import Flask, render_template, redirect, url_for, flash, request\nfrom flask_login import LoginManager, login_user, logout_user, login_required, current_user\nfrom models import db, User, Client, Product, Credit, CreditPayment, SavingsAccount, SavingsTransaction, PaymentSchedule, AuditLog, ClientInteraction, SystemSettings, Notification, CreditDocument\nfrom forms import LoginForm, ClientForm, ProductForm, CreditForm, CreditPaymentForm, SavingsAccountForm, SavingsTransactionForm, ProfileForm, ChangePasswordForm, LoanSimulationForm, ClientInteractionForm, SystemSettingsForm, UserForm\nfrom sqlalchemy import func\nimport random\nimport string\nfrom dateutil.relativedelta import relativedelta\n\nload_dotenv()\n\napp = Flask(__name__)\napp.secret_key = os.environ.get(\"SESSION_SECRET\") or \"dev-secret-key-change-in-production\"\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = os.environ.get(\"DATABASE_URL\")\napp.config[\"SQLALCHEMY_ENGINE_OPTIONS\"] = {\n    \"pool_recycle\": 300,\n    \"pool_pre_ping\": True,\n}\n\ndb.init_app(app)\n\nlogin_manager = LoginManager()\nlogin_manager.init_app(app)\nlogin_manager.login_view = 'login'\nlogin_manager.login_message = 'Veuillez vous connecter pour accéder à cette page.'\n\n@login_manager.user_loader\ndef load_user(user_id):\n    return User.query.get(int(user_id))\n\ndef generate_unique_id(prefix, model, field):\n    while True:\n        random_part = ''.join(random.choices(string.digits, k=8))\n        unique_id = f\"{prefix}{random_part}\"\n        if not model.query.filter(getattr(model, field) == unique_id).first():\n            return unique_id\n\ndef log_audit(action, entity_type=None, entity_id=None, details=None):\n    log = AuditLog(\n        user_id=current_user.id if current_user.is_authenticated else None,\n        action=action,\n        entity_type=entity_type,\n        entity_id=entity_id,\n        details=details,\n        ip_address=request.remote_addr\n    )\n    db.session.add(log)\n\ndef generate_payment_schedule(credit):\n    if not credit.disbursement_date:\n        return\n    \n    PaymentSchedule.query.filter_by(credit_id=credit.id).delete()\n    \n    start_date = credit.disbursement_date\n    for i in range(1, credit.duration_months + 1):\n        due_date = start_date + relativedelta(months=i)\n        schedule = PaymentSchedule(\n            credit_id=credit.id,\n            installment_number=i,\n            due_date=due_date.date(),\n            expected_amount=credit.monthly_payment\n        )\n        db.session.add(schedule)\n\ndef calculate_penalties(credit):\n    from datetime import datetime, timedelta\n    penalty_rate = 0.05\n    total_penalty = 0\n    \n    for installment in credit.payment_schedule:\n        if not installment.paid and installment.due_date < datetime.now().date():\n            days_late = (datetime.now().date() - installment.due_date).days\n            if days_late > 0:\n                penalty = installment.expected_amount * penalty_rate * (days_late / 30)\n                total_penalty += penalty\n    \n    return round(total_penalty, 2)\n\ndef calculate_client_credit_score(client):\n    total_credits = Credit.query.filter_by(client_id=client.id).count()\n    if total_credits == 0:\n        return 50\n    \n    completed_credits = Credit.query.filter_by(client_id=client.id, status='completed').count()\n    active_credits = Credit.query.filter_by(client_id=client.id, status='active').all()\n    \n    score = 50\n    \n    if total_credits > 0:\n        completion_rate = completed_credits / total_credits\n        score += completion_rate * 30\n    \n    for credit in active_credits:\n        if credit.amount_paid > 0:\n            payment_ratio = credit.amount_paid / credit.total_amount\n            score += payment_ratio * 10\n        \n        overdue_count = len(credit.overdue_installments)\n        if overdue_count > 0:\n            score -= overdue_count * 5\n    \n    return max(0, min(100, round(score, 2)))\n\ndef apply_savings_interest(account):\n    if account.status != 'active':\n        return\n    \n    from datetime import datetime\n    from dateutil.relativedelta import relativedelta\n    \n    last_transaction = SavingsTransaction.query.filter_by(\n        account_id=account.id,\n        transaction_type='interest'\n    ).order_by(SavingsTransaction.transaction_date.desc()).first()\n    \n    current_date = datetime.now()\n    last_interest_date = last_transaction.transaction_date if last_transaction else account.opening_date\n    \n    delta = relativedelta(current_date, last_interest_date)\n    months_passed = delta.years * 12 + delta.months\n    \n    if months_passed >= 1 and account.balance > 0:\n        monthly_rate = account.interest_rate / 100 / 12\n        interest_amount = account.balance * monthly_rate * months_passed\n        \n        account.balance += interest_amount\n        \n        transaction = SavingsTransaction(\n            account_id=account.id,\n            transaction_type='interest',\n            amount=interest_amount,\n            balance_after=account.balance,\n            notes=f'Intérêts calculés pour {months_passed} mois'\n        )\n        db.session.add(transaction)\n\ndef generate_payment_alerts():\n    from datetime import datetime, timedelta\n    \n    today = datetime.now().date()\n    alert_window = today + timedelta(days=7)\n    \n    upcoming_payments = PaymentSchedule.query.filter(\n        PaymentSchedule.due_date <= alert_window,\n        PaymentSchedule.due_date >= today,\n        PaymentSchedule.paid == False\n    ).all()\n    \n    for payment in upcoming_payments:\n        credit = payment.credit\n        days_until_due = (payment.due_date - today).days\n        \n        existing_alert = Notification.query.filter_by(\n            notification_type='payment_reminder',\n            related_entity_type='PaymentSchedule',\n            related_entity_id=payment.id,\n            is_read=False\n        ).first()\n        \n        if not existing_alert:\n            all_admins = User.query.filter(User.role.in_(['administrateur', 'gestionnaire'])).all()\n            \n            for admin in all_admins:\n                notification = Notification(\n                    user_id=admin.id,\n                    title=f'Échéance dans {days_until_due} jour(s)',\n                    message=f'Le crédit {credit.credit_number} de {credit.client.full_name} a une échéance de {payment.expected_amount} FCFA le {payment.due_date.strftime(\"%d/%m/%Y\")}',\n                    notification_type='payment_reminder',\n                    related_entity_type='PaymentSchedule',\n                    related_entity_id=payment.id\n                )\n                db.session.add(notification)\n    \n    overdue_payments = PaymentSchedule.query.filter(\n        PaymentSchedule.due_date < today,\n        PaymentSchedule.paid == False\n    ).all()\n    \n    for payment in overdue_payments:\n        credit = payment.credit\n        days_overdue = (today - payment.due_date).days\n        \n        existing_alert = Notification.query.filter_by(\n            notification_type='payment_overdue',\n            related_entity_type='PaymentSchedule',\n            related_entity_id=payment.id,\n            is_read=False\n        ).first()\n        \n        if not existing_alert:\n            all_admins = User.query.filter(User.role.in_(['administrateur', 'gestionnaire'])).all()\n            \n            for admin in all_admins:\n                notification = Notification(\n                    user_id=admin.id,\n                    title=f'⚠️ Paiement en retard de {days_overdue} jour(s)',\n                    message=f'ALERTE: Le crédit {credit.credit_number} de {credit.client.full_name} a un paiement en retard depuis le {payment.due_date.strftime(\"%d/%m/%Y\")}. Montant: {payment.expected_amount} FCFA',\n                    notification_type='payment_overdue',\n                    related_entity_type='PaymentSchedule',\n                    related_entity_id=payment.id\n                )\n                db.session.add(notification)\n    \n    db.session.commit()\n\nwith app.app_context():\n    db.create_all()\n    \n    admin_username = os.environ.get(\"ADMIN_USERNAME\")\n    admin_password = os.environ.get(\"ADMIN_PASSWORD\")\n    admin_email = os.environ.get(\"ADMIN_EMAIL\", \"admin@example.com\")\n    \n    if admin_username and admin_password and not User.query.filter_by(username=admin_username).first():\n        admin = User(username=admin_username, email=admin_email, role='administrateur')\n        admin.set_password(admin_password)\n        db.session.add(admin)\n        db.session.commit()\n        print(f\"Utilisateur administrateur '{admin_username}' créé avec succès\")\n    \n    default_users = [\n        {'username': 'gestionnaire1', 'email': 'gestionnaire1@finance.com', 'password': 'Manager@123', 'role': 'gestionnaire'},\n        {'username': 'gestionnaire2', 'email': 'gestionnaire2@finance.com', 'password': 'Manager@123', 'role': 'gestionnaire'},\n        {'username': 'agent1', 'email': 'agent1@finance.com', 'password': 'Agent@123', 'role': 'agent'},\n        {'username': 'agent2', 'email': 'agent2@finance.com', 'password': 'Agent@123', 'role': 'agent'},\n        {'username': 'agent3', 'email': 'agent3@finance.com', 'password': 'Agent@123', 'role': 'agent'},\n    ]\n    \n    for user_data in default_users:\n        if not User.query.filter_by(username=user_data['username']).first():\n            user = User(\n                username=user_data['username'],\n                email=user_data['email'],\n                role=user_data['role']\n            )\n            user.set_password(user_data['password'])\n            db.session.add(user)\n    \n    db.session.commit()\n    \n    if not SystemSettings.query.first():\n        default_settings = SystemSettings()\n        db.session.add(default_settings)\n        db.session.commit()\n        print(\"Paramètres système par défaut créés\")\n\n@app.route('/')\ndef index():\n    if current_user.is_authenticated:\n        return redirect(url_for('dashboard'))\n    return redirect(url_for('login'))\n\n@app.route('/login', methods=['GET', 'POST'])\ndef login():\n    if current_user.is_authenticated:\n        return redirect(url_for('dashboard'))\n    \n    form = LoginForm()\n    if form.validate_on_submit():\n        user = User.query.filter_by(username=form.username.data).first()\n        if user and user.check_password(form.password.data):\n            login_user(user)\n            flash('Connexion réussie!', 'success')\n            next_page = request.args.get('next')\n            return redirect(next_page) if next_page else redirect(url_for('dashboard'))\n        else:\n            flash('Nom d\\'utilisateur ou mot de passe incorrect', 'danger')\n    return render_template('login.html', form=form)\n\n@app.route('/logout')\n@login_required\ndef logout():\n    logout_user()\n    flash('Déconnexion réussie', 'info')\n    return redirect(url_for('login'))\n\n@app.route('/dashboard')\n@login_required\ndef dashboard():\n    generate_payment_alerts()\n    \n    total_clients = Client.query.count()\n    total_credits = Credit.query.count()\n    active_credits = Credit.query.filter_by(status='active').count()\n    total_savings = SavingsAccount.query.count()\n    \n    total_credit_amount = db.session.query(func.sum(Credit.amount)).filter(Credit.status.in_(['active', 'approved', 'disbursed'])).scalar() or 0\n    total_credit_paid = db.session.query(func.sum(Credit.amount_paid)).filter(Credit.status.in_(['active', 'approved', 'disbursed'])).scalar() or 0\n    total_savings_balance = db.session.query(func.sum(SavingsAccount.balance)).filter_by(status='active').scalar() or 0\n    \n    recent_credits = Credit.query.order_by(Credit.application_date.desc()).limit(5).all()\n    recent_clients = Client.query.order_by(Client.created_at.desc()).limit(5).all()\n    \n    pending_credits = Credit.query.filter_by(status='pending').count()\n    \n    credit_products = Product.query.filter_by(product_type='credit', active=True).count()\n    savings_products = Product.query.filter_by(product_type='savings', active=True).count()\n    \n    from datetime import datetime, timedelta\n    upcoming_due = PaymentSchedule.query.filter(\n        PaymentSchedule.due_date <= datetime.now().date() + timedelta(days=7),\n        PaymentSchedule.due_date >= datetime.now().date(),\n        PaymentSchedule.paid == False\n    ).count()\n    \n    overdue = PaymentSchedule.query.filter(\n        PaymentSchedule.due_date < datetime.now().date(),\n        PaymentSchedule.paid == False\n    ).count()\n    \n    return render_template('dashboard.html',\n                         total_clients=total_clients,\n                         total_credits=total_credits,\n                         active_credits=active_credits,\n                         total_savings=total_savings,\n                         total_credit_amount=total_credit_amount,\n                         total_credit_paid=total_credit_paid,\n                         total_savings_balance=total_savings_balance,\n                         recent_credits=recent_credits,\n                         recent_clients=recent_clients,\n                         pending_credits=pending_credits,\n                         credit_products=credit_products,\n                         savings_products=savings_products,\n                         upcoming_due=upcoming_due,\n                         overdue=overdue)\n\n@app.route('/clients')\n@login_required\ndef clients():\n    search_query = request.args.get('search', '')\n    filter_status = request.args.get('status', '')\n    \n    query = Client.query\n    \n    if search_query:\n        search_pattern = f'%{search_query}%'\n        query = query.filter(\n            db.or_(\n                Client.first_name.ilike(search_pattern),\n                Client.last_name.ilike(search_pattern),\n                Client.client_id.ilike(search_pattern),\n                Client.email.ilike(search_pattern),\n                Client.phone.ilike(search_pattern)\n            )\n        )\n    \n    clients_list = query.order_by(Client.created_at.desc()).all()\n    return render_template('clients.html', clients=clients_list, search_query=search_query)\n\n@app.route('/clients/new', methods=['GET', 'POST'])\n@login_required\ndef new_client():\n    form = ClientForm()\n    if form.validate_on_submit():\n        client = Client(\n            client_id=generate_unique_id('CLT', Client, 'client_id'),\n            first_name=form.first_name.data,\n            last_name=form.last_name.data,\n            email=form.email.data,\n            phone=form.phone.data,\n            address=form.address.data,\n            date_of_birth=form.date_of_birth.data,\n            id_number=form.id_number.data\n        )\n        db.session.add(client)\n        db.session.commit()\n        flash(f'Client {client.full_name} créé avec succès!', 'success')\n        return redirect(url_for('clients'))\n    return render_template('client_form.html', form=form, title='Nouveau Client')\n\n@app.route('/clients/<int:id>/edit', methods=['GET', 'POST'])\n@login_required\ndef edit_client(id):\n    client = Client.query.get_or_404(id)\n    form = ClientForm(obj=client)\n    if form.validate_on_submit():\n        form.populate_obj(client)\n        client.updated_at = datetime.utcnow()\n        db.session.commit()\n        flash(f'Client {client.full_name} mis à jour avec succès!', 'success')\n        return redirect(url_for('client_detail', id=id))\n    return render_template('client_form.html', form=form, title='Modifier Client', client=client)\n\n@app.route('/clients/<int:id>')\n@login_required\ndef client_detail(id):\n    client = Client.query.get_or_404(id)\n    interaction_form = ClientInteractionForm()\n    credit_score = calculate_client_credit_score(client)\n    return render_template('client_detail.html', client=client, interaction_form=interaction_form, credit_score=credit_score)\n\n@app.route('/clients/<int:id>/interaction', methods=['POST'])\n@login_required\ndef add_client_interaction(id):\n    client = Client.query.get_or_404(id)\n    form = ClientInteractionForm()\n    \n    if form.validate_on_submit():\n        interaction = ClientInteraction(\n            client_id=id,\n            user_id=current_user.id,\n            interaction_type=form.interaction_type.data,\n            subject=form.subject.data,\n            notes=form.notes.data\n        )\n        db.session.add(interaction)\n        log_audit('Interaction client ajoutée', 'ClientInteraction', None, f'Interaction avec {client.full_name}: {form.subject.data}')\n        db.session.commit()\n        flash('Interaction enregistrée avec succès!', 'success')\n    \n    return redirect(url_for('client_detail', id=id))\n\n@app.route('/clients/<int:id>/delete', methods=['POST'])\n@login_required\ndef delete_client(id):\n    if current_user.role != 'administrateur':\n        flash('Accès non autorisé', 'danger')\n        return redirect(url_for('clients'))\n    \n    client = Client.query.get_or_404(id)\n    db.session.delete(client)\n    db.session.commit()\n    flash(f'Client {client.full_name} supprimé avec succès!', 'success')\n    return redirect(url_for('clients'))\n\n@app.route('/products')\n@login_required\ndef products():\n    products_list = Product.query.order_by(Product.created_at.desc()).all()\n    return render_template('products.html', products=products_list)\n\n@app.route('/products/new', methods=['GET', 'POST'])\n@login_required\ndef new_product():\n    form = ProductForm()\n    if form.validate_on_submit():\n        product = Product(\n            name=form.name.data,\n            product_type=form.product_type.data,\n            interest_rate=form.interest_rate.data,\n            min_amount=form.min_amount.data,\n            max_amount=form.max_amount.data,\n            min_duration=form.min_duration.data,\n            max_duration=form.max_duration.data,\n            description=form.description.data,\n            active=form.active.data\n        )\n        db.session.add(product)\n        db.session.commit()\n        flash(f'Produit {product.name} créé avec succès!', 'success')\n        return redirect(url_for('products'))\n    return render_template('product_form.html', form=form, title='Nouveau Produit')\n\n@app.route('/products/<int:id>/edit', methods=['GET', 'POST'])\n@login_required\ndef edit_product(id):\n    product = Product.query.get_or_404(id)\n    form = ProductForm(obj=product)\n    if form.validate_on_submit():\n        form.populate_obj(product)\n        db.session.commit()\n        flash(f'Produit {product.name} mis à jour avec succès!', 'success')\n        return redirect(url_for('products'))\n    return render_template('product_form.html', form=form, title='Modifier Produit', product=product)\n\n@app.route('/credits')\n@login_required\ndef credits():\n    search_query = request.args.get('search', '')\n    status_filter = request.args.get('status', '')\n    \n    query = Credit.query.join(Client)\n    \n    if search_query:\n        search_pattern = f'%{search_query}%'\n        query = query.filter(\n            db.or_(\n                Credit.credit_number.ilike(search_pattern),\n                Client.first_name.ilike(search_pattern),\n                Client.last_name.ilike(search_pattern),\n                Client.client_id.ilike(search_pattern)\n            )\n        )\n    \n    if status_filter:\n        query = query.filter(Credit.status == status_filter)\n    \n    credits_list = query.order_by(Credit.application_date.desc()).all()\n    return render_template('credits.html', credits=credits_list, search_query=search_query, status_filter=status_filter)\n\n@app.route('/credits/new', methods=['GET', 'POST'])\n@login_required\ndef new_credit():\n    form = CreditForm()\n    form.client_id.choices = [(c.id, c.full_name) for c in Client.query.order_by(Client.last_name).all()]\n    form.product_id.choices = [(p.id, p.name) for p in Product.query.filter_by(product_type='credit', active=True).all()]\n    \n    if form.validate_on_submit():\n        client = Client.query.get(form.client_id.data)\n        credit_score = calculate_client_credit_score(client)\n        \n        product = Product.query.get(form.product_id.data)\n        amount = form.amount.data\n        duration = form.duration_months.data\n        rate = product.interest_rate / 100 / 12\n        \n        if rate > 0:\n            monthly_payment = (amount * rate * (1 + rate)**duration) / ((1 + rate)**duration - 1)\n        else:\n            monthly_payment = amount / duration\n        \n        total_amount = monthly_payment * duration\n        \n        credit = Credit(\n            credit_number=generate_unique_id('CRD', Credit, 'credit_number'),\n            client_id=form.client_id.data,\n            product_id=form.product_id.data,\n            amount=amount,\n            interest_rate=product.interest_rate,\n            duration_months=duration,\n            monthly_payment=round(monthly_payment, 2),\n            total_amount=round(total_amount, 2),\n            notes=form.notes.data,\n            credit_score=credit_score,\n            status='pending'\n        )\n        db.session.add(credit)\n        log_audit('Demande de crédit créée', 'Credit', None, f'Demande de crédit pour {client.full_name}')\n        db.session.commit()\n        flash(f'Demande de crédit {credit.credit_number} créée avec succès! Score de solvabilité: {credit_score}/100', 'success')\n        return redirect(url_for('credits'))\n    \n    return render_template('credit_form.html', form=form, title='Nouvelle Demande de Crédit')\n\n@app.route('/credits/<int:id>')\n@login_required\ndef credit_detail(id):\n    credit = Credit.query.get_or_404(id)\n    payment_form = CreditPaymentForm()\n    \n    if credit.status == 'active':\n        penalty = calculate_penalties(credit)\n        if penalty != credit.penalty_amount:\n            credit.penalty_amount = penalty\n            db.session.commit()\n    \n    return render_template('credit_detail.html', credit=credit, payment_form=payment_form)\n\n@app.route('/credits/<int:id>/approve', methods=['POST'])\n@login_required\ndef approve_credit(id):\n    if current_user.role not in ['administrateur', 'gestionnaire']:\n        flash('Accès non autorisé', 'danger')\n        return redirect(url_for('credits'))\n    \n    credit = Credit.query.get_or_404(id)\n    credit.status = 'approved'\n    credit.approval_date = datetime.utcnow()\n    db.session.commit()\n    flash(f'Crédit {credit.credit_number} approuvé avec succès!', 'success')\n    return redirect(url_for('credit_detail', id=id))\n\n@app.route('/credits/<int:id>/disburse', methods=['POST'])\n@login_required\ndef disburse_credit(id):\n    if current_user.role not in ['administrateur', 'gestionnaire']:\n        flash('Accès non autorisé', 'danger')\n        return redirect(url_for('credits'))\n    \n    credit = Credit.query.get_or_404(id)\n    if credit.status == 'approved':\n        credit.status = 'active'\n        credit.disbursement_date = datetime.utcnow()\n        generate_payment_schedule(credit)\n        log_audit('Crédit décaissé', 'Credit', credit.id, f'Crédit {credit.credit_number} décaissé')\n        db.session.commit()\n        flash(f'Crédit {credit.credit_number} décaissé avec succès!', 'success')\n    return redirect(url_for('credit_detail', id=id))\n\n@app.route('/credits/<int:id>/payment', methods=['POST'])\n@login_required\ndef add_credit_payment(id):\n    credit = Credit.query.get_or_404(id)\n    form = CreditPaymentForm()\n    \n    if form.validate_on_submit():\n        payment = CreditPayment(\n            credit_id=id,\n            amount=form.amount.data,\n            payment_method=form.payment_method.data,\n            reference=form.reference.data,\n            notes=form.notes.data\n        )\n        credit.amount_paid += form.amount.data\n        \n        if credit.amount_paid >= credit.total_amount:\n            credit.status = 'completed'\n        \n        db.session.add(payment)\n        db.session.commit()\n        flash(f'Paiement de {form.amount.data} enregistré avec succès!', 'success')\n    \n    return redirect(url_for('credit_detail', id=id))\n\n@app.route('/loan-simulation', methods=['GET', 'POST'])\n@login_required\ndef loan_simulation():\n    form = LoanSimulationForm()\n    form.product_id.choices = [(p.id, p.name) for p in Product.query.filter_by(product_type='credit', active=True).all()]\n    \n    simulation_result = None\n    if form.validate_on_submit():\n        product = Product.query.get(form.product_id.data)\n        amount = form.amount.data\n        duration = form.duration_months.data\n        rate = product.interest_rate / 100 / 12\n        \n        if rate > 0:\n            monthly_payment = (amount * rate * (1 + rate)**duration) / ((1 + rate)**duration - 1)\n        else:\n            monthly_payment = amount / duration\n        \n        total_amount = monthly_payment * duration\n        total_interest = total_amount - amount\n        \n        simulation_result = {\n            'product_name': product.name,\n            'amount': amount,\n            'duration': duration,\n            'interest_rate': product.interest_rate,\n            'monthly_payment': round(monthly_payment, 2),\n            'total_amount': round(total_amount, 2),\n            'total_interest': round(total_interest, 2)\n        }\n    \n    return render_template('loan_simulation.html', form=form, simulation=simulation_result)\n\n@app.route('/savings')\n@login_required\ndef savings():\n    savings_list = SavingsAccount.query.order_by(SavingsAccount.opening_date.desc()).all()\n    return render_template('savings.html', savings=savings_list)\n\n@app.route('/savings/new', methods=['GET', 'POST'])\n@login_required\ndef new_savings():\n    form = SavingsAccountForm()\n    form.client_id.choices = [(c.id, c.full_name) for c in Client.query.order_by(Client.last_name).all()]\n    form.product_id.choices = [(p.id, p.name) for p in Product.query.filter_by(product_type='savings', active=True).all()]\n    \n    if form.validate_on_submit():\n        product = Product.query.get(form.product_id.data)\n        account = SavingsAccount(\n            account_number=generate_unique_id('SAV', SavingsAccount, 'account_number'),\n            client_id=form.client_id.data,\n            product_id=form.product_id.data,\n            interest_rate=product.interest_rate,\n            balance=form.initial_deposit.data or 0\n        )\n        db.session.add(account)\n        \n        if form.initial_deposit.data and form.initial_deposit.data > 0:\n            transaction = SavingsTransaction(\n                account_id=account.id,\n                transaction_type='deposit',\n                amount=form.initial_deposit.data,\n                balance_after=form.initial_deposit.data,\n                notes='Dépôt initial'\n            )\n            db.session.add(transaction)\n        \n        db.session.commit()\n        flash(f'Compte d\\'épargne {account.account_number} créé avec succès!', 'success')\n        return redirect(url_for('savings'))\n    \n    return render_template('savings_form.html', form=form, title='Nouveau Compte d\\'Épargne')\n\n@app.route('/savings/<int:id>')\n@login_required\ndef savings_detail(id):\n    account = SavingsAccount.query.get_or_404(id)\n    transaction_form = SavingsTransactionForm()\n    return render_template('savings_detail.html', account=account, transaction_form=transaction_form)\n\n@app.route('/savings/<int:id>/close', methods=['POST'])\n@login_required\ndef close_savings_account(id):\n    if current_user.role not in ['administrateur', 'gestionnaire']:\n        flash('Accès non autorisé', 'danger')\n        return redirect(url_for('savings'))\n    \n    account = SavingsAccount.query.get_or_404(id)\n    \n    if account.balance > 0:\n        flash('Impossible de clôturer un compte avec un solde positif. Effectuez un retrait complet d\\'abord.', 'danger')\n        return redirect(url_for('savings_detail', id=id))\n    \n    account.status = 'closed'\n    account.closing_date = datetime.utcnow()\n    log_audit('Compte d\\'épargne clôturé', 'SavingsAccount', account.id, f'Compte {account.account_number} clôturé')\n    db.session.commit()\n    flash(f'Compte d\\'épargne {account.account_number} clôturé avec succès!', 'success')\n    return redirect(url_for('savings'))\n\n@app.route('/savings/<int:id>/apply-interest', methods=['POST'])\n@login_required\ndef apply_interest(id):\n    if current_user.role not in ['administrateur', 'gestionnaire']:\n        flash('Accès non autorisé', 'danger')\n        return redirect(url_for('savings'))\n    \n    account = SavingsAccount.query.get_or_404(id)\n    apply_savings_interest(account)\n    log_audit('Intérêts d\\'épargne appliqués', 'SavingsAccount', account.id, f'Intérêts calculés pour le compte {account.account_number}')\n    db.session.commit()\n    flash(f'Intérêts appliqués au compte {account.account_number}!', 'success')\n    return redirect(url_for('savings_detail', id=id))\n\n@app.route('/savings/<int:id>/transaction', methods=['POST'])\n@login_required\ndef add_savings_transaction(id):\n    account = SavingsAccount.query.get_or_404(id)\n    form = SavingsTransactionForm()\n    \n    if form.validate_on_submit():\n        amount = form.amount.data\n        transaction_type = form.transaction_type.data\n        \n        if transaction_type == 'withdrawal' and amount > account.balance:\n            flash('Solde insuffisant pour ce retrait', 'danger')\n            return redirect(url_for('savings_detail', id=id))\n        \n        if transaction_type == 'deposit':\n            account.balance += amount\n        else:\n            account.balance -= amount\n        \n        transaction = SavingsTransaction(\n            account_id=id,\n            transaction_type=transaction_type,\n            amount=amount,\n            balance_after=account.balance,\n            reference=form.reference.data,\n            notes=form.notes.data\n        )\n        db.session.add(transaction)\n        db.session.commit()\n        flash(f'Transaction de {amount} enregistrée avec succès!', 'success')\n    \n    return redirect(url_for('savings_detail', id=id))\n\n@app.route('/reports')\n@login_required\ndef reports():\n    total_clients = Client.query.count()\n    total_active_credits = Credit.query.filter_by(status='active').count()\n    total_completed_credits = Credit.query.filter_by(status='completed').count()\n    total_pending_credits = Credit.query.filter_by(status='pending').count()\n    \n    total_credit_disbursed = db.session.query(func.sum(Credit.amount)).filter(\n        Credit.status.in_(['active', 'completed'])\n    ).scalar() or 0\n    \n    total_credit_recovered = db.session.query(func.sum(Credit.amount_paid)).filter(\n        Credit.status.in_(['active', 'completed'])\n    ).scalar() or 0\n    \n    total_penalties = db.session.query(func.sum(Credit.penalty_amount)).filter(\n        Credit.status == 'active'\n    ).scalar() or 0\n    \n    recovery_rate = (total_credit_recovered / total_credit_disbursed * 100) if total_credit_disbursed > 0 else 0\n    \n    total_savings_accounts = SavingsAccount.query.filter_by(status='active').count()\n    total_savings_balance = db.session.query(func.sum(SavingsAccount.balance)).filter_by(status='active').scalar() or 0\n    \n    credits_at_risk = Credit.query.filter_by(status='active').all()\n    at_risk_count = sum(1 for c in credits_at_risk if len(c.overdue_installments) > 0)\n    \n    recent_audits = AuditLog.query.order_by(AuditLog.timestamp.desc()).limit(20).all()\n    \n    monthly_stats = db.session.query(\n        func.date_trunc('month', Credit.application_date).label('month'),\n        func.count(Credit.id).label('count'),\n        func.sum(Credit.amount).label('total')\n    ).filter(\n        Credit.application_date >= datetime.utcnow() - relativedelta(months=12)\n    ).group_by('month').order_by('month').all()\n    \n    return render_template('reports.html',\n                         total_clients=total_clients,\n                         total_active_credits=total_active_credits,\n                         total_completed_credits=total_completed_credits,\n                         total_pending_credits=total_pending_credits,\n                         total_credit_disbursed=total_credit_disbursed,\n                         total_credit_recovered=total_credit_recovered,\n                         total_penalties=total_penalties,\n                         recovery_rate=recovery_rate,\n                         total_savings_accounts=total_savings_accounts,\n                         total_savings_balance=total_savings_balance,\n                         at_risk_count=at_risk_count,\n                         recent_audits=recent_audits,\n                         monthly_stats=monthly_stats)\n\n@app.route('/settings', methods=['GET', 'POST'])\n@login_required\ndef settings():\n    profile_form = ProfileForm(obj=current_user)\n    password_form = ChangePasswordForm()\n    \n    system_settings = SystemSettings.query.first()\n    if not system_settings:\n        system_settings = SystemSettings()\n        db.session.add(system_settings)\n        db.session.commit()\n    \n    settings_form = SystemSettingsForm(obj=system_settings)\n    \n    if profile_form.validate_on_submit() and 'profile_submit' in request.form:\n        existing_user = User.query.filter(User.username == profile_form.username.data, User.id != current_user.id).first()\n        if existing_user:\n            flash('Ce nom d\\'utilisateur est déjà utilisé', 'danger')\n        else:\n            current_user.username = profile_form.username.data\n            current_user.email = profile_form.email.data\n            db.session.commit()\n            flash('Profil mis à jour avec succès!', 'success')\n            return redirect(url_for('settings'))\n    \n    if password_form.validate_on_submit() and 'password_submit' in request.form:\n        if not current_user.check_password(password_form.current_password.data):\n            flash('Mot de passe actuel incorrect', 'danger')\n        elif password_form.new_password.data != password_form.confirm_password.data:\n            flash('Les nouveaux mots de passe ne correspondent pas', 'danger')\n        else:\n            current_user.set_password(password_form.new_password.data)\n            db.session.commit()\n            flash('Mot de passe changé avec succès!', 'success')\n            return redirect(url_for('settings'))\n    \n    if settings_form.validate_on_submit() and 'system_submit' in request.form:\n        if current_user.role != 'administrateur':\n            flash('Accès non autorisé', 'danger')\n            return redirect(url_for('settings'))\n        \n        settings_form.populate_obj(system_settings)\n        db.session.commit()\n        flash('Paramètres système mis à jour avec succès!', 'success')\n        return redirect(url_for('settings'))\n    \n    users = User.query.all() if current_user.role == 'administrateur' else []\n    unread_notifications = Notification.query.filter_by(user_id=current_user.id, is_read=False).count()\n    \n    return render_template('settings.html', \n                         profile_form=profile_form, \n                         password_form=password_form,\n                         settings_form=settings_form,\n                         users=users,\n                         unread_notifications=unread_notifications)\n\n@app.route('/users/new', methods=['GET', 'POST'])\n@login_required\ndef new_user():\n    if current_user.role != 'administrateur':\n        flash('Accès non autorisé', 'danger')\n        return redirect(url_for('settings'))\n    \n    form = UserForm()\n    if form.validate_on_submit():\n        if User.query.filter_by(username=form.username.data).first():\n            flash('Ce nom d\\'utilisateur existe déjà', 'danger')\n        elif User.query.filter_by(email=form.email.data).first():\n            flash('Cet email est déjà utilisé', 'danger')\n        else:\n            user = User(username=form.username.data, email=form.email.data, role=form.role.data)\n            user.set_password(form.password.data or 'ChangeMe123')\n            db.session.add(user)\n            log_audit('Utilisateur créé', 'User', None, f'Utilisateur {user.username} créé')\n            db.session.commit()\n            flash(f'Utilisateur {user.username} créé avec succès!', 'success')\n            return redirect(url_for('settings'))\n    return render_template('user_form.html', form=form, title='Nouvel Utilisateur')\n\n@app.route('/users/<int:id>/edit', methods=['GET', 'POST'])\n@login_required\ndef edit_user(id):\n    if current_user.role != 'administrateur':\n        flash('Accès non autorisé', 'danger')\n        return redirect(url_for('settings'))\n    \n    user = User.query.get_or_404(id)\n    form = UserForm(obj=user)\n    \n    if form.validate_on_submit():\n        existing = User.query.filter(User.username == form.username.data, User.id != id).first()\n        if existing:\n            flash('Ce nom d\\'utilisateur est déjà utilisé', 'danger')\n        else:\n            user.username = form.username.data\n            user.email = form.email.data\n            user.role = form.role.data\n            if form.password.data:\n                user.set_password(form.password.data)\n            log_audit('Utilisateur modifié', 'User', user.id, f'Utilisateur {user.username} modifié')\n            db.session.commit()\n            flash(f'Utilisateur {user.username} mis à jour avec succès!', 'success')\n            return redirect(url_for('settings'))\n    \n    return render_template('user_form.html', form=form, title='Modifier Utilisateur', user=user)\n\n@app.route('/users/<int:id>/delete', methods=['POST'])\n@login_required\ndef delete_user(id):\n    if current_user.role != 'administrateur':\n        flash('Accès non autorisé', 'danger')\n        return redirect(url_for('settings'))\n    \n    if id == current_user.id:\n        flash('Vous ne pouvez pas supprimer votre propre compte', 'danger')\n        return redirect(url_for('settings'))\n    \n    user = User.query.get_or_404(id)\n    username = user.username\n    db.session.delete(user)\n    log_audit('Utilisateur supprimé', 'User', id, f'Utilisateur {username} supprimé')\n    db.session.commit()\n    flash(f'Utilisateur {username} supprimé avec succès!', 'success')\n    return redirect(url_for('settings'))\n\n@app.route('/export/clients')\n@login_required\ndef export_clients():\n    import csv\n    from io import StringIO\n    from flask import make_response\n    \n    output = StringIO()\n    writer = csv.writer(output)\n    writer.writerow(['ID Client', 'Prénom', 'Nom', 'Email', 'Téléphone', 'Date de naissance', 'Date de création'])\n    \n    clients = Client.query.all()\n    for client in clients:\n        writer.writerow([\n            client.client_id,\n            client.first_name,\n            client.last_name,\n            client.email or '',\n            client.phone or '',\n            client.date_of_birth.strftime('%Y-%m-%d') if client.date_of_birth else '',\n            client.created_at.strftime('%Y-%m-%d %H:%M')\n        ])\n    \n    output.seek(0)\n    response = make_response(output.getvalue())\n    response.headers['Content-Disposition'] = 'attachment; filename=clients_export.csv'\n    response.headers['Content-Type'] = 'text/csv'\n    log_audit('Export clients', 'Client', None, f'{len(clients)} clients exportés')\n    return response\n\n@app.route('/export/credits')\n@login_required\ndef export_credits():\n    import csv\n    from io import StringIO\n    from flask import make_response\n    \n    output = StringIO()\n    writer = csv.writer(output)\n    writer.writerow(['Numéro', 'Client', 'Produit', 'Montant', 'Taux', 'Durée', 'Paiement Mensuel', 'Montant Total', 'Montant Payé', 'Solde', 'Statut', 'Date Demande'])\n    \n    credits = Credit.query.all()\n    for credit in credits:\n        writer.writerow([\n            credit.credit_number,\n            credit.client.full_name,\n            credit.product.name,\n            credit.amount,\n            credit.interest_rate,\n            credit.duration_months,\n            credit.monthly_payment,\n            credit.total_amount,\n            credit.amount_paid,\n            credit.balance,\n            credit.status,\n            credit.application_date.strftime('%Y-%m-%d')\n        ])\n    \n    output.seek(0)\n    response = make_response(output.getvalue())\n    response.headers['Content-Disposition'] = 'attachment; filename=credits_export.csv'\n    response.headers['Content-Type'] = 'text/csv'\n    log_audit('Export crédits', 'Credit', None, f'{len(credits)} crédits exportés')\n    return response\n\n@app.route('/export/savings')\n@login_required\ndef export_savings():\n    import csv\n    from io import StringIO\n    from flask import make_response\n    \n    output = StringIO()\n    writer = csv.writer(output)\n    writer.writerow(['Numéro Compte', 'Client', 'Produit', 'Solde', 'Taux d\\'intérêt', 'Statut', 'Date Ouverture'])\n    \n    accounts = SavingsAccount.query.all()\n    for account in accounts:\n        writer.writerow([\n            account.account_number,\n            account.client.full_name,\n            account.product.name,\n            account.balance,\n            account.interest_rate,\n            account.status,\n            account.opening_date.strftime('%Y-%m-%d')\n        ])\n    \n    output.seek(0)\n    response = make_response(output.getvalue())\n    response.headers['Content-Disposition'] = 'attachment; filename=savings_export.csv'\n    response.headers['Content-Type'] = 'text/csv'\n    log_audit('Export épargne', 'SavingsAccount', None, f'{len(accounts)} comptes exportés')\n    return response\n\n@app.route('/notifications')\n@login_required\ndef notifications():\n    page = request.args.get('page', 1, type=int)\n    notifications = Notification.query.filter_by(user_id=current_user.id).order_by(Notification.created_at.desc()).paginate(page=page, per_page=20, error_out=False)\n    return render_template('notifications.html', notifications=notifications)\n\n@app.route('/notifications/<int:id>/read', methods=['POST'])\n@login_required\ndef mark_notification_read(id):\n    notification = Notification.query.get_or_404(id)\n    if notification.user_id != current_user.id:\n        flash('Accès non autorisé', 'danger')\n        return redirect(url_for('notifications'))\n    \n    notification.is_read = True\n    db.session.commit()\n    return redirect(url_for('notifications'))\n\n@app.route('/notifications/mark-all-read', methods=['POST'])\n@login_required\ndef mark_all_notifications_read():\n    Notification.query.filter_by(user_id=current_user.id, is_read=False).update({'is_read': True})\n    db.session.commit()\n    flash('Toutes les notifications ont été marquées comme lues', 'success')\n    return redirect(url_for('notifications'))\n\n@app.route('/clients/<int:id>/credit-history')\n@login_required\ndef client_credit_history(id):\n    client = Client.query.get_or_404(id)\n    credits = Credit.query.filter_by(client_id=id).order_by(Credit.application_date.desc()).all()\n    \n    total_borrowed = sum(c.amount for c in credits if c.status in ['active', 'completed'])\n    total_repaid = sum(c.amount_paid for c in credits)\n    current_debt = sum(c.balance for c in credits if c.status == 'active')\n    \n    completed_on_time = sum(1 for c in credits if c.status == 'completed' and len(c.overdue_installments) == 0)\n    total_completed = sum(1 for c in credits if c.status == 'completed')\n    \n    on_time_rate = (completed_on_time / total_completed * 100) if total_completed > 0 else 100\n    credit_score = calculate_client_credit_score(client)\n    \n    return render_template('client_credit_history.html', \n                         client=client,\n                         credits=credits,\n                         total_borrowed=total_borrowed,\n                         total_repaid=total_repaid,\n                         current_debt=current_debt,\n                         on_time_rate=on_time_rate,\n                         credit_score=credit_score)\n\n@app.template_filter('currency')\ndef currency_filter(value):\n    if value is None:\n        value = 0\n    return f\"{value:,.2f} FCFA\"\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000, debug=True)\n","size_bytes":43813}},"version":2}